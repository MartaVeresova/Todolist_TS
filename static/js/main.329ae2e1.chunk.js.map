{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/todolistsList/todoLists-reducer.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","features/todolistsList/tasks-reducer.ts","features/todolistsList/todolist/task/Task.tsx","features/todolistsList/todolist/Todolist.tsx","features/todolistsList/TodoListsList.tsx","components/errorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResponseStatuses","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","todolistId","delete","put","taskId","model","initialState","status","error","entityStatus","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","dispatch","message","handleServerAppError","data","messages","length","AddItemForm","React","memo","addItem","disabled","useState","newItemTitle","setNewItemTitle","setError","onChangeHandler","useCallback","e","currentTarget","value","onClickAddItem","trim","onKeyPressHandler","key","TextField","variant","placeholder","onChange","onKeyPress","label","helperText","size","onBlur","IconButton","onClick","AddBox","EditableSpan","onChangeTitle","editMode","setEditMode","itemTitle","setItemTitle","offEditMode","Input","color","autoFocus","onDoubleClick","updateTaskTC","domainModel","getState","changedTask","tasks","find","t","id","apiModel","startDate","priority","deadline","description","then","res","resultCode","succeeded","todoListId","changeTaskAC","catch","err","Task","task","useDispatch","onRemoveHandler","removeTaskAC","onChangeChecked","checked","Completed","New","changedTitle","taskClasses","className","Checkbox","TodoList","changeTodoListTitle","removeTodolist","changeFilter","filter","useSelector","state","useEffect","setTasksAC","items","fetchTasksTC","newTasks","getTaskForTodoList","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onClickRemoveTodolist","addNewTask","item","addNewTaskTC","onChangeTodoListTitle","style","listStyle","paddingLeft","map","Button","marginLeft","TodoListsList","todoLists","changeTodolistEntityStatusAC","removeTodoListAC","addTodoList","todoList","addTodoListTC","changeTodoListTitleAC","changeTodoListTitleTC","changeTodoListFilterAC","Grid","container","padding","spacing","tl","Paper","elevation","Alert","props","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","justifyContent","Menu","Typography","LinearProgress","Container","fixed","rootReducers","combineReducers","action","forEach","stateCopy","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.329ae2e1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': '56cc9d09-6ac5-48a7-98d1-6f7ea21ef704',\r\n    },\r\n})\r\n\r\n//api\r\nexport const todoListApi = {\r\n    getTodos() {\r\n        return instance.get<TodoListType[]>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoListType }>>('/todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n//types\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: 0 | 1 | 10\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\nexport enum ResponseStatuses {\r\n    succeeded = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}\r\nexport type TaskType = {\r\n    todoListId: string\r\n    id: string\r\n    title: string\r\n    description: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    entityStatus: 'idle' as RequestStatusType\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'APP/SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n        case 'APP/SET-ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'APP/SET-STATUS', status} as const)\r\n\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({type: 'APP/SET-ERROR', error} as const)\r\n\r\n//types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {CommonResponseType} from '../api/todolist-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorUtilsDispatchType>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorUtilsDispatchType>, data: CommonResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some ERROR'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\ntype ErrorUtilsDispatchType = | SetAppStatusActionType | SetAppErrorActionType","import {ResponseStatuses, todoListApi, TodoListType} from '../../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppActionsType, AppThunk} from '../../app/store';\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\nexport type InitialTodoListsStateType = typeof initialState\r\n\r\n\r\nexport const todoListsReducer = (state = initialState, action: TodoListsActionsType): InitialTodoListsStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'TODO/SET-TODOLISTS':\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n\r\n        case 'TODO/REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n\r\n        case 'TODO/ADD-NEW-TODOLIST':\r\n            return [{...action.todoList, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'TODO/CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n\r\n        case 'TODO/CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.value} : tl)\r\n\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) =>\r\n    ({type: 'TODO/SET-TODOLISTS', todoLists} as const)\r\n\r\nexport const removeTodoListAC = (id: string) =>\r\n    ({type: 'TODO/REMOVE-TODOLIST', id} as const)\r\n\r\nexport const addNewTodoListAC = (todoList: TodoListType) =>\r\n    ({type: 'TODO/ADD-NEW-TODOLIST', todoList} as const)\r\n\r\nexport const changeTodoListTitleAC = (title: string, id: string) =>\r\n    ({type: 'TODO/CHANGE-TODOLIST-TITLE', title, id} as const)\r\n\r\nexport const changeTodoListFilterAC = (value: FilterValuesType, id: string) =>\r\n    ({type: 'TODO/CHANGE-TODOLIST-FILTER', value, id} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (entityStatus: RequestStatusType, id: string) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', entityStatus, id} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = () => (dispatch: Dispatch<AppActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListApi.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodoListsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTodoListTC = (id: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC('loading', id))\r\n    todoListApi.deleteTodo(id)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(removeTodoListAC(id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport const addTodoListTC = (title: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListApi.createTodo(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(addNewTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport const changeTodoListTitleTC = (id: string, title: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListApi.updateTodoTitle(id, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(changeTodoListTitleAC(title, id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type AddNewTodoListActionType = ReturnType<typeof addNewTodoListAC>\r\nexport type ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type ChangeTodoListFilterActionType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type TodoListsActionsType =\r\n    | SetTodoListsActionType\r\n    | RemoveTodoListActionType\r\n    | AddNewTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (newItemTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled}: AddItemFormPropsType) => {\r\n    const [newItemTitle, setNewItemTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItemTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }, [])\r\n\r\n    const onClickAddItem = useCallback(() => {\r\n        if (newItemTitle.trim() !== '') {\r\n            addItem(newItemTitle.trim())\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewItemTitle('')\r\n    }, [addItem, newItemTitle])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        (e.key === 'Enter') && onClickAddItem()\r\n    }, [onClickAddItem])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                error={error}\r\n                placeholder={'Enter a new task'}\r\n                value={newItemTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n                onBlur={() => setError(false)}\r\n                disabled={disabled}\r\n            />\r\n            <IconButton onClick={onClickAddItem} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (changedTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, onChangeTitle}: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [itemTitle, setItemTitle] = useState(title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        if (itemTitle.length > 100) {\r\n            setItemTitle(title)\r\n        }\r\n        onChangeTitle(itemTitle)\r\n    }, [onChangeTitle, itemTitle])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }, [offEditMode])\r\n    return (\r\n        editMode\r\n            ? <Input\r\n                color={'primary'}\r\n                value={itemTitle}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n    )\r\n})","import {AddNewTodoListActionType, RemoveTodoListActionType, SetTodoListsActionType,} from './todoLists-reducer';\r\nimport {TasksStateType} from '../../app/App';\r\nimport {ResponseStatuses, TaskType, todoListApi, UpdateTaskModelType} from '../../api/todolist-api';\r\nimport {AppRootStateType, AppThunk} from '../../app/store';\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\nexport type InitialTasksStateType = typeof initialState\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: TasksActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'TASKS/SET-TASKS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks\r\n            }\r\n\r\n        case 'TODO/SET-TODOLISTS':\r\n            action.todoLists.forEach(tl => ({...state[tl.id] = []}))\r\n            return {...state}\r\n\r\n        case 'TASKS/REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n\r\n        case 'TASKS/ADD-NEW-TASK':\r\n            // {\r\n            //     const stateCopy = {...state}\r\n            //     const newTask = action.task\r\n            //\r\n            //     const tasks = stateCopy[newTask.todoListId];\r\n            //     const newTasks = [newTask, ...tasks];\r\n            //     stateCopy[newTask.todoListId] = newTasks;\r\n            //\r\n            //     return stateCopy;\r\n            // }\r\n\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        case 'TASKS/CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    ...action.model\r\n                } : t)\r\n            }\r\n\r\n        case 'TODO/ADD-NEW-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n\r\n        case 'TODO/REMOVE-TODOLIST':\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n\r\n        // case 'CHANGE-TASK-ENTITY-STATUS':\r\n        //     return {\r\n        //         ...state,\r\n        //         [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n        //             ...t, entityStatus: action.entityStatus\r\n        //         } : t)\r\n        //     }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTasksAC = (todoListId: string, tasks: TaskType[]) =>\r\n    ({type: 'TASKS/SET-TASKS', todoListId, tasks} as const)\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) =>\r\n    ({type: 'TASKS/REMOVE-TASK', taskId, todoListId} as const)\r\n\r\nexport const addNewTaskAC = (task: TaskType) =>\r\n    ({type: 'TASKS/ADD-NEW-TASK', task} as const)\r\n\r\nexport const changeTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) =>\r\n    ({type: 'TASKS/CHANGE-TASK', taskId, model, todoListId} as const)\r\n\r\n// export const changeTaskEntityStatusAC = (entityStatus: RequestStatusType, todoListId: string, taskId: string) =>\r\n//     ({type: 'CHANGE-TASK-ENTITY-STATUS', entityStatus, todoListId, taskId} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListId: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListApi.getTasks(todoListId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(todoListId, res.data.items))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    //dispatch(changeTaskEntityStatusAC('loading', todolistId, taskId))\r\n    todoListApi.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport const addNewTaskTC = (todolistId: string, title: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListApi.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(addNewTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, domainModel: UpdateDomainTaskModelType, taskId: string): AppThunk => (dispatch, getState: () => AppRootStateType) => {\r\n\r\n    const changedTask = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    if (changedTask) {\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: changedTask.title,\r\n            status: changedTask.status,\r\n            startDate: changedTask.startDate,\r\n            priority: changedTask.priority,\r\n            deadline: changedTask.deadline,\r\n            description: changedTask.description,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListApi.updateTask(todolistId, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                    dispatch(changeTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\n\r\n//types\r\n// export type TasksDomainStateType = TasksStateType & {\r\n//     entityStatus: RequestStatusType\r\n// }\r\n\r\n\r\nexport type SetTaskActionType = ReturnType<typeof setTasksAC>\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddNewTaskActionType = ReturnType<typeof addNewTaskAC>\r\nexport type ChangeTaskActionType = ReturnType<typeof changeTaskAC>\r\n// export type ChangeTaskEntityStatusActionType = ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nexport type TasksActionsType =\r\n    | SetTaskActionType\r\n    | RemoveTaskActionType\r\n    | AddNewTaskActionType\r\n    | ChangeTaskActionType\r\n    | AddNewTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    // | ChangeTaskEntityStatusActionType\r\n\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from '../../../../components/editableSpan/EditableSpan';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch} from 'react-redux';\r\nimport {removeTaskTC, updateTaskTC} from '../../tasks-reducer';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolist-api';\r\nimport {RequestStatusType} from '../../../../app/app-reducer';\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string\r\n    task: TaskType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const Task = React.memo(({todoListId, task, entityStatus}: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onRemoveHandler = useCallback(() => dispatch(removeTaskTC(todoListId, task.id)), [dispatch, task, todoListId])\r\n\r\n    const onChangeChecked = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTaskTC(todoListId, {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}, task.id))\r\n    }, [dispatch, task, todoListId])\r\n\r\n    const onChangeTitle = useCallback((changedTitle: string) => dispatch(updateTaskTC(todoListId, {title: changedTitle}, task.id)), [dispatch, task, todoListId])\r\n\r\n    const taskClasses = task.status === TaskStatuses.Completed ? 'isDone' : ''\r\n\r\n    return (\r\n        <li key={task.id}>\r\n            <span className={taskClasses}>\r\n                <Checkbox\r\n                    color={'primary'}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeChecked}\r\n                />\r\n                <EditableSpan\r\n                    title={task.title}\r\n                    onChangeTitle={onChangeTitle}\r\n                />\r\n            </span>\r\n            <IconButton\r\n                onClick={onRemoveHandler}\r\n                disabled={entityStatus === 'loading'}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/addItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/editableSpan/EditableSpan';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {addNewTaskTC, fetchTasksTC} from '../tasks-reducer';\r\nimport {Task} from './task/Task';\r\nimport {TaskStatuses, TaskType} from '../../../api/todolist-api';\r\nimport {FilterValuesType} from '../todoLists-reducer';\r\nimport {RequestStatusType} from '../../../app/app-reducer';\r\n\r\n\r\nexport type TodoListPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\n\r\nexport const TodoList = React.memo(({\r\n                                        todoListId,\r\n                                        changeTodoListTitle,\r\n                                        removeTodolist,\r\n                                        changeFilter,\r\n                                        title,\r\n                                        filter,\r\n                                        entityStatus\r\n                                    }: TodoListPropsType) => {\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todoListId])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(todoListId))\r\n    }, [])\r\n\r\n    const getTaskForTodoList = () => {\r\n        switch (filter) {\r\n            case 'active':\r\n                return tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'completed':\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const newTasks = getTaskForTodoList()\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter('all', todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter('active', todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter('completed', todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onClickRemoveTodolist = useCallback(() => {\r\n        removeTodolist(todoListId)\r\n    }, [removeTodolist, todoListId])\r\n\r\n    const addNewTask = useCallback((newItemTitle: string) => dispatch(addNewTaskTC(todoListId, newItemTitle)), [dispatch, todoListId])\r\n\r\n    const onChangeTodoListTitle = useCallback((changedTitle: string) => changeTodoListTitle(changedTitle, todoListId), [changeTodoListTitle, todoListId])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={title}\r\n                    onChangeTitle={onChangeTodoListTitle}\r\n                />\r\n                <IconButton\r\n                    onClick={onClickRemoveTodolist}\r\n                    disabled={entityStatus === 'loading'}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                addItem={addNewTask}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                {\r\n                    newTasks.map(t => {\r\n                        return (\r\n                            <Task\r\n                                key={t.id}\r\n                                todoListId={todoListId}\r\n                                task={t}\r\n                                entityStatus={entityStatus}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onAllClickHandler}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onActiveClickHandler}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onCompletedClickHandler}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    InitialTodoListsStateType,\r\n    removeTodoListTC\r\n} from './todoLists-reducer';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {AddItemForm} from '../../components/addItemForm/AddItemForm';\r\nimport {TodoList} from './todolist/Todolist';\r\n\r\n\r\nexport const TodoListsList: React.FC = () => {\r\n    //BLL\r\n    const todoLists = useSelector<AppRootStateType, InitialTodoListsStateType>(state => state.todoLists)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    function removeTodolist(todoListId: string) {\r\n        dispatch(removeTodoListTC(todoListId))\r\n    }\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    function changeTodoListTitle(title: string, todoListId: string) {\r\n        dispatch(changeTodoListTitleTC(todoListId, title))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        dispatch(changeTodoListFilterAC(value, todoListId))\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper elevation={4} style={{padding: '15px'}}>\r\n                                <TodoList\r\n                                    todoListId={tl.id}\r\n                                    title={tl.title}\r\n                                    filter={tl.filter}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    changeFilter={changeFilter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TaskType} from '../api/todolist-api';\r\nimport {TodoListsList} from '../features/todolistsList/TodoListsList';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/errorSnackbar/ErrorSnackbar';\r\n\r\n// export type TaskDomainType = TaskType & {\r\n//     entityStatus: RequestStatusType\r\n// }\r\n//\r\n// export type TasksStateType = {\r\n//     [key: string]: Array<TaskDomainType>\r\n// }\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        color={'inherit'}\r\n                        variant={'outlined'}\r\n                    >\r\n                        LogIn\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n            <Container fixed>\r\n                <TodoListsList/>\r\n            </Container>\r\n\r\n            <ErrorSnackbar />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TasksActionsType, tasksReducer} from '../features/todolistsList/tasks-reducer';\r\nimport {TodoListsActionsType, todoListsReducer} from '../features/todolistsList/todoLists-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {appReducer} from './app-reducer';\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\nexport type AppActionsType = TodoListsActionsType | TasksActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}