{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newItemTitle","setNewItemTitle","error","setError","onClickAddItem","trim","addItem","TextField","variant","placeholder","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","size","onBlur","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","title","itemTitle","setItemTitle","offEditMode","onChangeTitle","Input","color","autoFocus","onDoubleClick","Todolist","changedTitle","changeTodoListTitle","todoListId","removeTodolist","Delete","addTask","style","listStyle","paddingLeft","tasks","map","t","taskClasses","isDone","id","className","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTasks","Button","filter","changeFilter","marginLeft","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","newTask","taskId","newIsDoneChecked","task","find","newTitle","tl","getTasksForTodolist","todoList","todoListComponent","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8cfa442b.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newItemTitle: string) => void\r\n}\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [newItemTitle, setNewItemTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItemTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        (e.key === 'Enter') && onClickAddItem()\r\n        }\r\n\r\n    const onClickAddItem = () => {\r\n        if (newItemTitle.trim() !== '') {\r\n            props.addItem(newItemTitle.trim())\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewItemTitle('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                error={error}\r\n                placeholder={'Enter a new task'}\r\n                value={newItemTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n                onBlur={() => setError(false)}\r\n            />\r\n            <IconButton onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (changedTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [itemTitle, setItemTitle] = useState(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChangeTitle(itemTitle)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n    return (\r\n        editMode\r\n            ? <Input\r\n                color={'primary'}\r\n                value={itemTitle}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TasksPropsType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    tasks: Array<TasksPropsType>\r\n    removeTasks: (id: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneChecked: boolean, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter('all', props.todoListId)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter('active', props.todoListId)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter('completed', props.todoListId)\r\n    }\r\n    const onClickRemoveTodolist = () => {\r\n        props.removeTodolist(props.todoListId)\r\n    }\r\n    const addNewTask = (newItemTitle: string) => props.addTask(newItemTitle, props.todoListId)\r\n    const onChangeTodoListTitle = (changedTitle: string) => props.changeTodoListTitle(changedTitle, props.todoListId)\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChangeTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={onClickRemoveTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addNewTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                {\r\n                    props.tasks.map(t => {\r\n                        const onRemoveHandler = () => {\r\n                            props.removeTasks(t.id, props.todoListId)\r\n                        }\r\n                        const onChangeChecked = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListId)\r\n                        }\r\n                        const onChangeTitle = (changedTitle: string) => props.changeTaskTitle(t.id, changedTitle, props.todoListId)\r\n\r\n                        const taskClasses = t.isDone ? 'isDone' : ''\r\n\r\n                        return (\r\n                            <li key={t.id}>\r\n                                <span className={taskClasses}>\r\n                                    <Checkbox\r\n                                        color={'primary'}\r\n                                        checked={t.isDone}\r\n                                        onChange={onChangeChecked}\r\n                                    />\r\n                                    <EditableSpan title={t.title}\r\n                                                  onChangeTitle={onChangeTitle}\r\n                                    />\r\n                                </span>\r\n                                <IconButton onClick={onRemoveHandler}>\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onAllClickHandler}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onActiveClickHandler}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onCompletedClickHandler}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TasksPropsType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksPropsType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n\r\n    //BLL:\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListsType>>([\r\n        {id: todoListID1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true}, //t\r\n            {id: v1(), title: 'JS', isDone: true}, //t\r\n            {id: v1(), title: 'React', isDone: false}, //t\r\n            {id: v1(), title: 'Redux', isDone: false}, //t\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true}, //t\r\n            {id: v1(), title: 'JS', isDone: true}, //t\r\n            {id: v1(), title: 'React', isDone: false}, //t\r\n            {id: v1(), title: 'Redux', isDone: false}, //t\r\n        ],\r\n    })\r\n\r\n    function removeTasks(id: string, todoListId: string) {\r\n        //фильтр, пропусти те таски, id-шки которых не равны удаленной id-шке\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter(t => t.id !== id)}) //setTasks - функция, которая меняет данные и вызывается после логической обработки; в параметрах - отфильтрованный массив\r\n    }\r\n    function addTask(title: string, todoListId: string) {\r\n        const newTask: TasksPropsType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]})\r\n    }\r\n    function changeTaskStatus(taskId: string, newIsDoneChecked: boolean, todoListId: string) {\r\n        let task = tasks[todoListId].find(t => t.id === taskId)\r\n        task && (task.isDone = newIsDoneChecked)\r\n        setTasks({...tasks})\r\n    }\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListId: string) {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].map(t => t.id === taskId ? {...t, title: newTitle} : t)})\r\n    }\r\n\r\n\r\n    function removeTodolist(todoListId: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListsType = {\r\n            id: newTodoListID,\r\n            title,\r\n            filter: 'all'\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n    function changeTodoListTitle(title: string, todoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, title: title} : tl))\r\n    }\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: value} : tl))\r\n    }\r\n\r\n    //UI:\r\n    function getTasksForTodolist(todoList: TodoListsType) {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    const todoListComponent = todoLists.map(tl =>\r\n        <Grid item key={tl.id}>\r\n            <Paper elevation={4} style={{padding: '15px'}}>\r\n                <Todolist\r\n                    todoListId={tl.id}\r\n                    title={tl.title}\r\n                    tasks={getTasksForTodolist(tl)}\r\n                    removeTasks={removeTasks}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    filter={tl.filter}\r\n                    removeTodolist={removeTodolist}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n    return (\r\n        //JSX\r\n        <div>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        color={'inherit'}\r\n                        variant={'outlined'}\r\n                    >\r\n                        LogIn\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListComponent}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}