{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","newTaskTitle","setNewTaskTitle","error","setError","errorMessage","style","color","title","onClick","removeTodolist","todoListId","placeholder","value","onChange","e","currentTarget","onKeyPress","key","addTask","className","trim","tasks","map","t","id","isDone","type","checked","changeTaskStatus","removeTasks","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","newTask","taskId","newIsDoneChecked","task","find","tl","getTasksForTodolist","todoList","todoListComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.103ba9d0.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\n\r\nexport type TasksPropsType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    tasks: Array<TasksPropsType>\r\n    removeTasks: (id: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneChecked: boolean, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todoListId: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.addTask(newTaskTitle, props.todoListId);\r\n            setNewTaskTitle('')\r\n        }\r\n    }\r\n    const onClickAddTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addTask(newTaskTitle.trim(), props.todoListId)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewTaskTitle('')\r\n    }\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter('all', props.todoListId)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter('active', props.todoListId)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter('completed', props.todoListId)\r\n    }\r\n    const errorMessage = error && <div style={{color: 'red'}}>Title is required!</div>\r\n\r\n    const onClickRemoveTodolist = () => {props.removeTodolist(props.todoListId)}\r\n    return (\r\n        <div>\r\n            <h3>\r\n                {props.title}\r\n                <button onClick={onClickRemoveTodolist}>X</button>\r\n            </h3>\r\n            <div>\r\n                <input\r\n                    placeholder={'Enter a new task'}\r\n                    value={newTaskTitle}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    className={error ? 'error' : ''}\r\n                />\r\n                <button onClick={onClickAddTask}>+</button>\r\n                {errorMessage}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n                        const onRemoveHandler = () => {\r\n                            props.removeTasks(t.id, props.todoListId)\r\n                        }\r\n                        const onChangeChecked = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListId)\r\n                        }\r\n                        return (\r\n                            <li key={t.id} className={t.isDone ? 'isDone' : ''}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={t.isDone}\r\n                                    onChange={onChangeChecked}\r\n                                />\r\n                                <span>{t.title}</span>\r\n                                <button onClick={onRemoveHandler}>delete</button>\r\n                            </li>)\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === 'all' ? 'activeFilter' : ''} onClick={onAllClickHandler}> All\r\n                </button>\r\n                <button className={props.filter === 'active' ? 'activeFilter' : ''}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </button>\r\n                <button className={props.filter === 'completed' ? 'activeFilter' : ''}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TasksPropsType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TasksPropsType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n    //BLL:\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListsType>>([\r\n        {id: todoListID1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true}, //t\r\n            {id: v1(), title: 'JS', isDone: true}, //t\r\n            {id: v1(), title: 'React', isDone: false}, //t\r\n            {id: v1(), title: 'Redux', isDone: false}, //t\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true}, //t\r\n            {id: v1(), title: 'JS', isDone: true}, //t\r\n            {id: v1(), title: 'React', isDone: false}, //t\r\n            {id: v1(), title: 'Redux', isDone: false}, //t\r\n        ],\r\n    })\r\n\r\n    function removeTasks(id: string, todoListId: string) {\r\n        //фильтр, пропусти те таски, id-шки которых не равны удаленной id-шке\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter(t => t.id !== id)}) //setTasks - функция, которая меняет данные и вызывается после логической обработки; в параметрах - отфильтрованный массив\r\n    }\r\n\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        const newTask: TasksPropsType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]})\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, newIsDoneChecked: boolean, todoListId: string) {\r\n        let task = tasks[todoListId].find(t => t.id === taskId)\r\n        task && (task.isDone = newIsDoneChecked)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: value} : tl))\r\n    }\r\n\r\n    //UI:\r\n\r\n\r\n    function getTasksForTodolist(todoList: TodoListsType) {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    function removeTodolist(todoListId: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n    const todoListComponent = todoLists.map(tl => {\r\n            return <Todolist\r\n                key={tl.id}\r\n                todoListId={tl.id}\r\n                title={tl.title}\r\n                tasks={getTasksForTodolist(tl)}\r\n                removeTasks={removeTasks}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeTaskStatus}\r\n                filter={tl.filter}\r\n                removeTodolist={removeTodolist}\r\n            />\r\n        }\r\n    )\r\n    return (\r\n        //JSX\r\n        <div className=\"App\">\r\n            {todoListComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}