{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","state/todoLists-reducer.ts","state/tasks-reducer.ts","Task.tsx","Todolist.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","addItem","useState","newItemTitle","setNewItemTitle","error","setError","onChangeHandler","useCallback","e","currentTarget","value","onClickAddItem","trim","onKeyPressHandler","key","TextField","variant","placeholder","onChange","onKeyPress","label","helperText","size","onBlur","IconButton","onClick","AddBox","EditableSpan","title","onChangeTitle","editMode","setEditMode","itemTitle","setItemTitle","offEditMode","Input","color","autoFocus","onDoubleClick","REMOVE_TODOLIST","ADD_NEW_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","initialState","REMOVE_TASK","ADD_NEW_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","Task","todoListId","task","dispatch","useDispatch","onRemoveHandler","id","type","removeTaskAC","onChangeChecked","taskId","newIsDoneChecked","changeTaskStatusAC","checked","changedTitle","newTitle","changeTaskTitleAC","taskClasses","isDone","className","Checkbox","Delete","Todolist","changeTodoListTitle","removeTodolist","changeFilter","filter","tasks","useSelector","state","newTasks","t","getTaskForTodoList","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onClickRemoveTodolist","addNewTask","addNewTaskAC","onChangeTodoListTitle","style","listStyle","paddingLeft","map","Button","marginLeft","App","todoLists","removeTodoListAC","addTodoList","v1","addNewTodoListAC","changeTodoListTitleAC","changeTodoListFilterAC","todoListComponent","tl","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","spacing","rootReducers","combineReducers","action","newTodoList","newTask","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.65a3f484.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (newItemTitle: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(({addItem}: AddItemFormPropsType) => {\r\n    const [newItemTitle, setNewItemTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItemTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }, [])\r\n\r\n    const onClickAddItem = useCallback(() => {\r\n        if (newItemTitle.trim() !== '') {\r\n            addItem(newItemTitle.trim())\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewItemTitle('')\r\n    }, [addItem, newItemTitle])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        (e.key === 'Enter') && onClickAddItem()\r\n    }, [onClickAddItem])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                error={error}\r\n                placeholder={'Enter a new task'}\r\n                value={newItemTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n                onBlur={() => setError(false)}\r\n            />\r\n            <IconButton onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (changedTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, onChangeTitle}: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [itemTitle, setItemTitle] = useState(title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        onChangeTitle(itemTitle)\r\n    }, [onChangeTitle, itemTitle])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }, [offEditMode])\r\n    return (\r\n        editMode\r\n            ? <Input\r\n                color={'primary'}\r\n                value={itemTitle}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n    )\r\n})","import {FilterValuesType, TodoListsType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST'\r\nexport const ADD_NEW_TODOLIST = 'ADD-NEW-TODOLIST'\r\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE'\r\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER'\r\n\r\nexport type RemoveTodoListType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListId: string\r\n}\r\nexport type AddNewTodoListType = {\r\n    type: 'ADD-NEW-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListTitleType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListFilterType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    value: FilterValuesType\r\n    todoListId: string\r\n}\r\nexport type ActionsType =\r\n    RemoveTodoListType\r\n    | AddNewTodoListType\r\n    | ChangeTodoListTitleType\r\n    | ChangeTodoListFilterType\r\n\r\nconst initialState: Array<TodoListsType> = []\r\n\r\nexport type InitialTodoListsStateType = typeof initialState\r\n\r\nexport const todoListsReducer = (state = initialState, action: ActionsType): InitialTodoListsStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case REMOVE_TODOLIST:\r\n            return state.filter(tl => tl.id !== action.todoListId)\r\n\r\n        case ADD_NEW_TODOLIST:\r\n            const newTodoList: TodoListsType = {\r\n                id: action.todoListId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }\r\n            return [newTodoList, ...state]\r\n\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.title} : tl)\r\n\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.value} : tl)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListType => {\r\n    return {type: REMOVE_TODOLIST, todoListId}\r\n}\r\nexport const addNewTodoListAC = (title: string): AddNewTodoListType => {\r\n    return {type: ADD_NEW_TODOLIST, title, todoListId: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (title: string, todoListId: string): ChangeTodoListTitleType => {\r\n    return {type: CHANGE_TODOLIST_TITLE, title, todoListId}\r\n}\r\nexport const changeTodoListFilterAC = (value: FilterValuesType, todoListId: string): ChangeTodoListFilterType => {\r\n    return {type: CHANGE_TODOLIST_FILTER, value, todoListId}\r\n}","import {v1} from 'uuid';\r\nimport {ADD_NEW_TODOLIST, AddNewTodoListType, REMOVE_TODOLIST, RemoveTodoListType,} from './todoLists-reducer';\r\nimport {TasksStateType} from '../App';\r\nimport {TasksPropsType} from '../Todolist';\r\n\r\nexport const REMOVE_TASK = 'REMOVE-TASK'\r\nexport const ADD_NEW_TASK = 'ADD-NEW-TASK'\r\nexport const CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\r\nexport const CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\r\n\r\n\r\nexport type RemoveTaskType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todoListId: string\r\n}\r\nexport type AddNewTaskType = {\r\n    type: 'ADD-NEW-TASK'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskStatusType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    newIsDoneChecked: boolean\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskTitleType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    newTitle: string\r\n    todoListId: string\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveTaskType\r\n    | AddNewTaskType\r\n    | ChangeTaskStatusType\r\n    | ChangeTaskTitleType\r\n    | AddNewTodoListType\r\n    | RemoveTodoListType\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.id)\r\n            }\r\n\r\n        case ADD_NEW_TASK:\r\n            const newTask: TasksPropsType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [newTask, ...state[action.todoListId]]\r\n            }\r\n\r\n        case CHANGE_TASK_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    isDone: action.newIsDoneChecked\r\n                } : t)\r\n            }\r\n\r\n        case CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.newTitle\r\n                } : t)\r\n            }\r\n\r\n        case ADD_NEW_TODOLIST:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: []\r\n            }\r\n\r\n        case REMOVE_TODOLIST:\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (id: string, todoListId: string): RemoveTaskType => {\r\n    return {type: REMOVE_TASK, id, todoListId}\r\n}\r\nexport const addNewTaskAC = (title: string, todoListId: string): AddNewTaskType => {\r\n    return {type: ADD_NEW_TASK, title, todoListId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, newIsDoneChecked: boolean, todoListId: string): ChangeTaskStatusType => {\r\n    return {type: CHANGE_TASK_STATUS, taskId, newIsDoneChecked, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, newTitle: string, todoListId: string): ChangeTaskTitleType => {\r\n    return {type: CHANGE_TASK_TITLE, taskId, newTitle, todoListId}\r\n}","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch} from 'react-redux';\r\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {TasksPropsType} from './Todolist';\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string\r\n    task: TasksPropsType\r\n}\r\n\r\n\r\nexport const Task = React.memo(({todoListId, task}: TaskPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onRemoveHandler = useCallback(() => dispatch(removeTaskAC(task.id, todoListId)), [dispatch, task, todoListId])\r\n\r\n    const onChangeChecked = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatusAC(task.id, e.currentTarget.checked, todoListId))\r\n    }, [dispatch, task, todoListId])\r\n\r\n    const onChangeTitle = useCallback((changedTitle: string) => dispatch(changeTaskTitleAC(task.id, changedTitle, todoListId)), [dispatch, task, todoListId])\r\n\r\n    const taskClasses = task.isDone ? 'isDone' : ''\r\n\r\n    return (\r\n        <li key={task.id}>\r\n                                <span className={taskClasses}>\r\n                                    <Checkbox\r\n                                        color={'primary'}\r\n                                        checked={task.isDone}\r\n                                        onChange={onChangeChecked}\r\n                                    />\r\n                                    <EditableSpan title={task.title}\r\n                                                  onChangeTitle={onChangeTitle}\r\n                                    />\r\n                                </span>\r\n            <IconButton onClick={onRemoveHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {addNewTaskAC} from './state/tasks-reducer';\r\nimport {Task} from './Task';\r\n\r\nexport type TasksPropsType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({\r\n                                        todoListId,\r\n                                        changeTodoListTitle,\r\n                                        removeTodolist,\r\n                                        changeFilter,\r\n                                        title,\r\n                                        filter\r\n                                    }: TodolistPropsType) => {\r\n\r\n    const tasks = useSelector<AppRootStateType, Array<TasksPropsType>>(state => state.tasks[todoListId])\r\n    const dispatch = useDispatch()\r\n\r\n    const getTaskForTodoList = () => {\r\n        switch (filter) {\r\n            case 'active':\r\n                return tasks.filter(t => !t.isDone)\r\n            case 'completed':\r\n                return tasks.filter(t => t.isDone)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const newTasks = getTaskForTodoList()\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter('all', todoListId)\r\n    }, [changeFilter, todoListId])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter('active', todoListId)\r\n    }, [changeFilter, todoListId])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter('completed', todoListId)\r\n    }, [changeFilter, todoListId])\r\n    const onClickRemoveTodolist = useCallback(() => {\r\n        removeTodolist(todoListId)\r\n    }, [removeTodolist, todoListId])\r\n    const addNewTask = useCallback((newItemTitle: string) => dispatch(addNewTaskAC(newItemTitle, todoListId)), [dispatch, todoListId])\r\n    const onChangeTodoListTitle = useCallback((changedTitle: string) => changeTodoListTitle(changedTitle, todoListId), [changeTodoListTitle, todoListId])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={title} onChangeTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={onClickRemoveTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addNewTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                {\r\n                    newTasks.map(t => {\r\n                        return (\r\n                            <Task\r\n                                key={t.id}\r\n                                todoListId={todoListId}\r\n                                task={t}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onAllClickHandler}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onActiveClickHandler}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onCompletedClickHandler}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TasksPropsType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addNewTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    InitialTodoListsStateType,\r\n    removeTodoListAC\r\n} from './state/todoLists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksPropsType>\r\n}\r\n\r\nfunction App() {\r\n    //BLL:\r\n    const todoLists = useSelector<AppRootStateType, InitialTodoListsStateType>(state => state.todoLists)\r\n    const dispatch = useDispatch()\r\n\r\n    function removeTodolist(todoListId: string) {\r\n        dispatch(removeTodoListAC(todoListId))\r\n    }\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addNewTodoListAC(title))\r\n    }, [dispatch])\r\n\r\n    function changeTodoListTitle(title: string, todoListId: string) {\r\n        dispatch(changeTodoListTitleAC(title, todoListId))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        dispatch(changeTodoListFilterAC(value, todoListId))\r\n    }\r\n\r\n    //UI:\r\n\r\n    const todoListComponent = todoLists.map(tl =>\r\n        <Grid item key={tl.id}>\r\n            <Paper elevation={4} style={{padding: '15px'}}>\r\n                <Todolist\r\n                    todoListId={tl.id}\r\n                    title={tl.title}\r\n                    changeFilter={changeFilter}\r\n                    filter={tl.filter}\r\n                    removeTodolist={removeTodolist}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n    return (\r\n        //JSX\r\n        <div>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        color={'inherit'}\r\n                        variant={'outlined'}\r\n                    >\r\n                        LogIn\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListComponent}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todoLists-reducer';\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}