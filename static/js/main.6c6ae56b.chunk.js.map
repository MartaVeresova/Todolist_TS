{"version":3,"sources":["components/pages/Error404.module.css","serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/todolistsList/todoLists-reducer.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","features/todolistsList/tasks-reducer.ts","features/todolistsList/todolist/task/Task.tsx","features/todolistsList/todolist/Todolist.tsx","features/todolistsList/TodoListsList.tsx","components/errorSnackbar/ErrorSnackbar.tsx","features/login/icon/InfoIcon.tsx","features/login/Login.tsx","assets/images/Error404.png","components/pages/Error404.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResponseStatuses","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","todolistId","delete","put","taskId","model","authApi","data","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","type","status","error","isInitialized","removeTodoListAC","id","changeTodoListTitleAC","changeTodolistEntityStatusAC","entityStatus","removeTodoListTC","a","res","resultCode","succeeded","AddItemForm","React","memo","addItem","disabled","console","log","useState","newItemTitle","setNewItemTitle","setError","onChangeHandler","useCallback","e","currentTarget","value","onClickAddItem","trim","onKeyPressHandler","key","TextField","variant","placeholder","onChange","onKeyPress","label","helperText","size","onBlur","IconButton","onClick","AddBox","EditableSpan","onChangeTitle","editMode","setEditMode","itemTitle","setItemTitle","offEditMode","Input","color","autoFocus","onDoubleClick","setTasksAC","todoListId","tasks","removeTaskAC","changeTaskAC","changeTaskEntityStatusAC","updateTaskTC","domainModel","getState","changedTask","find","t","apiModel","startDate","priority","deadline","description","Task","task","useDispatch","onRemoveHandler","onChangeChecked","checked","Completed","New","changedTitle","taskClasses","style","display","justifyContent","alignItems","className","Checkbox","TodoList","todoList","changeTodoListTitle","removeTodolist","changeFilter","demo","useSelector","state","useEffect","items","newTasks","filter","getTaskForTodoList","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onClickRemoveTodolist","addNewTask","item","onChangeTodoListTitle","listStyle","paddingLeft","map","Button","marginLeft","TodoListsList","todoLists","auth","addTodoList","addTodoListTC","changeTodoListTitleTC","Grid","container","padding","spacing","tl","Paper","elevation","to","Alert","props","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TriggersTooltips","setOpen","direction","justify","width","Tooltip","placement","href","marginTop","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","classes","useStyles","Container","component","maxWidth","CssBaseline","paper","Avatar","avatar","Typography","handleSubmit","form","noValidate","height","margin","required","fullWidth","touched","getFieldProps","FormControlLabel","control","submit","isValid","makeStyles","theme","flexDirection","backgroundColor","palette","secondary","main","Error404","history","useHistory","onClickHandler","goBack","s","src","Error404Img","alt","App","AppBar","position","Toolbar","LinearProgress","fixed","exact","path","render","from","top","textAlign","CircularProgress","rootReducers","combineReducers","action","forEach","stateCopy","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6c6ae56b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__19vDO\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': '56cc9d09-6ac5-48a7-98d1-6f7ea21ef704',\r\n    },\r\n})\r\n\r\n//api\r\nexport const todoListApi = {\r\n    getTodos() {\r\n        return instance.get<TodoListType[]>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoListType }>>('/todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksResponseType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{ userId?: number }>>(`/auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeResponseType>>(`/auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n    },\r\n}\r\n\r\n//types\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: 0 | 1 | 10\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport enum ResponseStatuses {\r\n    succeeded = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}\r\n\r\nexport type TaskType = {\r\n    todoListId: string\r\n    id: string\r\n    title: string\r\n    description: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\ntype TasksResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeResponseType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {CommonResponseType} from '../api/todolist-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorUtilsDispatchType>, message: string) => {\r\n    debugger\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorUtilsDispatchType>, data: CommonResponseType<T>) => {\r\n    debugger\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some ERROR'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\ntype ErrorUtilsDispatchType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType","import {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {AppThunk} from '../../app/store';\r\nimport {authApi, LoginParamsType, ResponseStatuses} from '../../api/todolist-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', isLoggedIn} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await authApi.login(data)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const logoutTC = (): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await authApi.logout()\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n// types\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\nexport type AuthActionsType =\r\n    | SetIsLoggedInActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n","import {AppThunk} from './store';\r\nimport {authApi, ResponseStatuses} from '../api/todolist-api';\r\nimport {setIsLoggedInAC, SetIsLoggedInActionType} from '../features/login/auth-reducer';\r\nimport {handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'App/SET-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'App/SET-ERROR':\r\n            return {...state, error: action.error}\r\n\r\n        case 'App/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'App/SET-STATUS', status} as const)\r\n\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({type: 'App/SET-ERROR', error} as const)\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'App/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n\r\n//thunks\r\nexport const initializeAppTC = (): AppThunk =>\r\n    async dispatch => {\r\n        try {\r\n            const res = await authApi.me()\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                dispatch(setIsLoggedInAC(false)) //в данном приложении не нужен, т.к. и initialState === false\r\n                dispatch(setAppStatusAC('failed')) //тоже нет необходимости\r\n                // handleServerAppError(dispatch, res.data)\r\n            }\r\n            dispatch(setIsInitializedAC(true))\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport type AppActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetIsLoggedInActionType\r\n    | SetIsInitializedActionType","import {ResponseStatuses, todoListApi, TodoListType} from '../../api/todolist-api';\r\nimport {AppThunk} from '../../app/store';\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\nexport type InitialTodoListsStateType = typeof initialState\r\n\r\n\r\nexport const todoListsReducer = (state = initialState, action: TodoListsActionsType): InitialTodoListsStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        // case 'todo/SET-TODOLISTS':\r\n        //     return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        //\r\n        // case 'todo/REMOVE-TODOLIST':\r\n        //     return state.filter(tl => tl.id !== action.id)\r\n        //\r\n        // case 'todo/ADD-NEW-TODOLIST':\r\n        //\r\n        //\r\n        // case 'todo/CHANGE-TODOLIST-TITLE':\r\n        //\r\n        // case 'todo/CHANGE-TODOLIST-FILTER':\r\n        //\r\n        // case 'todo/CHANGE-TODOLIST-ENTITY-STATUS':\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n        //\r\n\r\n\r\n        case 'todo/SET-TODOLISTS':\r\n            debugger\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n\r\n        case 'todo/REMOVE-TODOLIST':\r\n            debugger\r\n            return state.filter(tl => tl.id !== action.id)\r\n\r\n        case 'todo/ADD-NEW-TODOLIST':\r\n            debugger\r\n            return [{...action.todoList, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'todo/CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n\r\n        case 'todo/CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n\r\n        case 'todo/CHANGE-TODOLIST-ENTITY-STATUS':\r\n            debugger\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) => {\r\n    debugger\r\n    return ({type: 'todo/SET-TODOLISTS', todoLists} as const)\r\n}\r\n// ({type: 'todo/SET-TODOLISTS', todoLists} as const)\r\n\r\nexport const removeTodoListAC = (id: string) => {\r\n    debugger\r\n    return ({type: 'todo/REMOVE-TODOLIST', id} as const)\r\n}\r\n// ({type: 'todo/REMOVE-TODOLIST', id} as const)\r\n\r\nexport const addNewTodoListAC = (todoList: TodoListType) => {\r\n    debugger\r\n    return ({type: 'todo/ADD-NEW-TODOLIST', todoList} as const)\r\n}\r\n// ({type: 'todo/ADD-NEW-TODOLIST', todoList} as const)\r\n\r\nexport const changeTodoListTitleAC = (title: string, id: string) =>\r\n    ({type: 'todo/CHANGE-TODOLIST-TITLE', title, id} as const)\r\n\r\nexport const changeTodoListFilterAC = (filter: FilterValuesType, id: string) =>\r\n    ({type: 'todo/CHANGE-TODOLIST-FILTER', filter, id} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (entityStatus: RequestStatusType, id: string) => {\r\n    debugger\r\n    return   ({type: 'todo/CHANGE-TODOLIST-ENTITY-STATUS', entityStatus, id} as const)\r\n}\r\n    // ({type: 'todo/CHANGE-TODOLIST-ENTITY-STATUS', entityStatus, id} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = (): AppThunk =>\r\n    async dispatch => {\r\n        debugger\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.getTodos()\r\n            debugger\r\n            dispatch(setTodoListsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (err) {\r\n            debugger\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const removeTodoListTC = (id: string): AppThunk =>\r\n    async dispatch => {\r\n    debugger\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC('loading', id))\r\n        try {\r\n            const res = await todoListApi.deleteTodo(id)\r\n            debugger\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                debugger\r\n                dispatch(removeTodoListAC(id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const addTodoListTC = (title: string): AppThunk =>\r\n    async dispatch => {\r\n        debugger\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            debugger\r\n            const res = await todoListApi.createTodo(title)\r\n            debugger\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                debugger\r\n                dispatch(addNewTodoListAC(res.data.data.item))\r\n                debugger\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const changeTodoListTitleTC = (id: string, title: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.updateTodoTitle(id, title)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(changeTodoListTitleAC(title, id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type AddNewTodoListActionType = ReturnType<typeof addNewTodoListAC>\r\nexport type ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type ChangeTodoListFilterActionType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type TodoListsActionsType =\r\n    | SetTodoListsActionType\r\n    | RemoveTodoListActionType\r\n    | AddNewTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (newItemTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    console.log('AddItemForm')\r\n    debugger\r\n\r\n    const [newItemTitle, setNewItemTitle] = useState('')\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        debugger\r\n        setNewItemTitle(e.currentTarget.value)\r\n        debugger\r\n        setError(false)\r\n    }, [])\r\n\r\n    const onClickAddItem = useCallback(() => {\r\n        debugger\r\n        if (newItemTitle.trim() !== '') {\r\n            debugger\r\n            addItem(newItemTitle.trim())\r\n        } else {\r\n            debugger\r\n            setError(true)\r\n        }\r\n        debugger\r\n        setNewItemTitle('')\r\n    }, [addItem, newItemTitle])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        (e.key === 'Enter') && onClickAddItem()\r\n    }, [onClickAddItem])\r\n\r\n    debugger\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                error={error}\r\n                placeholder={'Enter a new task'}\r\n                value={newItemTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n                onBlur={() => setError(false)}\r\n                disabled={disabled}\r\n            />\r\n            <IconButton onClick={onClickAddItem} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    disabled?: boolean\r\n    onChangeTitle: (changedTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, disabled = false, onChangeTitle}: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [itemTitle, setItemTitle] = useState(title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        if (itemTitle.length > 100) {\r\n            setItemTitle(title)\r\n        }\r\n        onChangeTitle(itemTitle)\r\n    }, [onChangeTitle, itemTitle, title])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }, [offEditMode])\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <Input\r\n                color={'primary'}\r\n                value={itemTitle}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n    )\r\n})","import {AddNewTodoListActionType, RemoveTodoListActionType, SetTodoListsActionType,} from './todoLists-reducer';\r\nimport {TasksStateType} from '../../app/App';\r\nimport {ResponseStatuses, TaskType, todoListApi, UpdateTaskModelType} from '../../api/todolist-api';\r\nimport {AppRootStateType, AppThunk} from '../../app/store';\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\nexport type InitialTasksStateType = typeof initialState\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: TasksActionsType): InitialTasksStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        // case 'todo/SET-TODOLISTS':\r\n        //     action.todoLists.forEach(tl => ({...state[tl.id] = []}))\r\n        //     return {...state}\r\n        //\r\n        // case 'tasks/SET-TASKS':\r\n        //     return {\r\n        //         [action.todoListId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))\r\n        //     }\r\n        //\r\n\r\n\r\n        case 'tasks/SET-TASKS':\r\n            debugger\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))\r\n            }\r\n\r\n        case 'todo/SET-TODOLISTS':\r\n            debugger\r\n            action.todoLists.forEach(tl => ({...state[tl.id] = []}))\r\n            return {...state}\r\n\r\n        case 'tasks/REMOVE-TASK':\r\n            debugger\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n\r\n        case 'tasks/ADD-NEW-TASK':\r\n            debugger\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{...action.task, entityStatus: 'idle'}, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        case 'tasks/CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    ...action.model\r\n                } : t)\r\n            }\r\n\r\n        case 'todo/ADD-NEW-TODOLIST':\r\n            debugger\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n\r\n        case 'todo/REMOVE-TODOLIST':\r\n            debugger\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n\r\n        case 'tasks/CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t, entityStatus: action.entityStatus\r\n                } : t)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTasksAC = (todoListId: string, tasks: TaskType[]) => {\r\n    debugger\r\n    return ({type: 'tasks/SET-TASKS', todoListId, tasks} as const)\r\n}\r\n// ({type: 'Tasks/SET-TASKS', todoListId, tasks} as const)\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return ({type: 'tasks/REMOVE-TASK', taskId, todoListId} as const)\r\n}\r\n    // ({type: 'tasks/REMOVE-TASK', taskId, todoListId} as const)\r\n\r\nexport const addNewTaskAC = (task: TaskType) => {\r\n    debugger\r\n    return ({type: 'tasks/ADD-NEW-TASK', task} as const)\r\n}\r\n    // ({type: 'tasks/ADD-NEW-TASK', task} as const)\r\n\r\nexport const changeTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) =>\r\n    ({type: 'tasks/CHANGE-TASK', taskId, model, todoListId} as const)\r\n\r\nexport const changeTaskEntityStatusAC = (entityStatus: RequestStatusType, todoListId: string, taskId: string) =>\r\n    ({type: 'tasks/CHANGE-TASK-ENTITY-STATUS', entityStatus, todoListId, taskId} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListId: string): AppThunk =>\r\n    async dispatch => {\r\n        debugger\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.getTasks(todoListId)\r\n            debugger\r\n            dispatch(setAppStatusAC('loading')) //под вопросом\r\n            dispatch(setTasksAC(todoListId, res.data.items))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk =>\r\n    async dispatch => {\r\n    debugger\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC('loading', todolistId, taskId))\r\n        try {\r\n            const res = await todoListApi.deleteTask(todolistId, taskId)\r\n            debugger\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const addNewTaskTC = (todolistId: string, title: string): AppThunk =>\r\n    async dispatch => {\r\n    debugger\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n        debugger\r\n            const res = await todoListApi.createTask(todolistId, title)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                debugger\r\n                dispatch(addNewTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const updateTaskTC = (todolistId: string, domainModel: UpdateDomainTaskModelType, taskId: string): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const changedTask = getState().tasks[todolistId].find(t => t.id === taskId)\r\n        if (changedTask) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: changedTask.title,\r\n                status: changedTask.status,\r\n                startDate: changedTask.startDate,\r\n                priority: changedTask.priority,\r\n                deadline: changedTask.deadline,\r\n                description: changedTask.description,\r\n                ...domainModel\r\n            }\r\n            dispatch(setAppStatusAC('loading'))\r\n            try {\r\n                const res = await todoListApi.updateTask(todolistId, taskId, apiModel)\r\n                if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                    dispatch(changeTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            } catch (err) {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            }\r\n        }\r\n    }\r\n\r\n//types\r\nexport type SetTaskActionType = ReturnType<typeof setTasksAC>\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddNewTaskActionType = ReturnType<typeof addNewTaskAC>\r\nexport type ChangeTaskActionType = ReturnType<typeof changeTaskAC>\r\nexport type ChangeTaskEntityStatusActionType = ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nexport type TasksActionsType =\r\n    | SetTaskActionType\r\n    | RemoveTaskActionType\r\n    | AddNewTaskActionType\r\n    | ChangeTaskActionType\r\n    | AddNewTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTaskEntityStatusActionType\r\n\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from '../../../../components/editableSpan/EditableSpan';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch} from 'react-redux';\r\nimport {removeTaskTC, updateTaskTC} from '../../tasks-reducer';\r\nimport {TaskStatuses} from '../../../../api/todolist-api';\r\nimport {RequestStatusType} from '../../../../app/app-reducer';\r\nimport {TaskDomainType} from '../../../../app/App';\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string\r\n    task: TaskDomainType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const Task = React.memo(({todoListId, task, entityStatus}: TaskPropsType) => {\r\n    debugger\r\n    console.log('Task')\r\n    const dispatch = useDispatch()\r\n\r\n    const onRemoveHandler = useCallback(() => {\r\n        debugger\r\n        return dispatch(removeTaskTC(todoListId, task.id))\r\n    }, [dispatch, task, todoListId])\r\n\r\n    // dispatch(removeTaskTC(todoListId, task.id)), [dispatch, task, todoListId])\r\n\r\n    const onChangeChecked = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTaskTC(todoListId, {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}, task.id))\r\n    }, [dispatch, task, todoListId])\r\n\r\n    const onChangeTitle = useCallback((changedTitle: string) => dispatch(updateTaskTC(todoListId, {title: changedTitle}, task.id)), [dispatch, task, todoListId])\r\n\r\n    const taskClasses = task.status === TaskStatuses.Completed ? 'isDone' : ''\r\n\r\n    return (\r\n        <li key={task.id} style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\r\n            <span className={taskClasses}>\r\n                <Checkbox\r\n                    color={'primary'}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeChecked}\r\n                    disabled={entityStatus === 'loading'}\r\n                />\r\n                <EditableSpan\r\n                    title={task.title}\r\n                    onChangeTitle={onChangeTitle}\r\n                    disabled={entityStatus === 'loading'}\r\n                />\r\n            </span>\r\n            <IconButton\r\n                onClick={onRemoveHandler}\r\n                disabled={entityStatus === 'loading'}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/addItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/editableSpan/EditableSpan';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {addNewTaskTC, fetchTasksTC} from '../tasks-reducer';\r\nimport {Task} from './task/Task';\r\nimport {TaskStatuses} from '../../../api/todolist-api';\r\nimport {FilterValuesType, removeTodoListTC, TodoListDomainType} from '../todoLists-reducer';\r\nimport {RequestStatusType} from '../../../app/app-reducer';\r\nimport {TaskDomainType} from '../../../app/App';\r\n\r\n\r\nexport type TodoListPropsType = {\r\n    todoList: TodoListDomainType\r\n    entityStatus: RequestStatusType\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodoList = React.memo(({\r\n                                        todoList,\r\n                                        changeTodoListTitle,\r\n                                        removeTodolist,\r\n                                        changeFilter,\r\n                                        entityStatus,\r\n                                        demo = false,\r\n                                    }: TodoListPropsType) => {\r\n    console.log('TodoList')\r\n    debugger\r\n    const tasks = useSelector<AppRootStateType, Array<TaskDomainType>>(state => state.tasks[todoList.id])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTasksTC(todoList.id))\r\n    }, [dispatch, todoList, demo])\r\n\r\n    const getTaskForTodoList = () => {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'completed':\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const newTasks = getTaskForTodoList()\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter('all', todoList.id)\r\n    }, [changeFilter, todoList.id])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter('active', todoList.id)\r\n    }, [changeFilter, todoList.id])\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter('completed', todoList.id)\r\n    }, [changeFilter, todoList.id])\r\n\r\n    const onClickRemoveTodolist = useCallback(() => {\r\n        debugger\r\n        dispatch(removeTodoListTC(todoList.id))\r\n        // removeTodolist(todoList.id)\r\n    }, [removeTodolist, todoList.id])\r\n\r\n    const addNewTask = useCallback((newItemTitle: string) => {\r\n        debugger\r\n        dispatch(addNewTaskTC(todoList.id, newItemTitle))\r\n    }, [dispatch, todoList.id])\r\n\r\n    const onChangeTodoListTitle = useCallback((changedTitle: string) => changeTodoListTitle(changedTitle, todoList.id), [changeTodoListTitle, todoList.id])\r\n    debugger\r\n    return (\r\n        <div>\r\n            <h3 style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\r\n                <EditableSpan\r\n                    title={todoList.title}\r\n                    onChangeTitle={onChangeTodoListTitle}\r\n                    disabled={entityStatus === 'loading'}\r\n                />\r\n                <IconButton\r\n                    onClick={onClickRemoveTodolist}\r\n                    disabled={entityStatus === 'loading'}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                addItem={addNewTask}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                {\r\n                    newTasks.map(t => {\r\n                        debugger\r\n                        return (\r\n                            <Task\r\n                                key={t.id}\r\n                                todoListId={todoList.id}\r\n                                task={t}\r\n                                entityStatus={t.entityStatus}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={todoList.filter === 'all' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onAllClickHandler}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={todoList.filter === 'active' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onActiveClickHandler}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={todoList.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onCompletedClickHandler}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    InitialTodoListsStateType,\r\n    removeTodoListTC\r\n} from './todoLists-reducer';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {AddItemForm} from '../../components/addItemForm/AddItemForm';\r\nimport {TodoList} from './todolist/Todolist';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoListsList: React.FC<PropsType> = React.memo(({demo = false}) => {\r\n    console.log('TodoListsList')\r\n    debugger\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, InitialTodoListsStateType>(state => state.todoLists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch, isLoggedIn, demo])\r\n\r\n    function removeTodolist(todoListId: string) {\r\n        debugger\r\n        dispatch(removeTodoListTC(todoListId))\r\n    }\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        debugger\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    function changeTodoListTitle(title: string, todoListId: string) {\r\n        dispatch(changeTodoListTitleTC(todoListId, title))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        dispatch(changeTodoListFilterAC(value, todoListId))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        debugger\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    debugger\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper elevation={4} style={{padding: '15px'}}>\r\n                                <TodoList\r\n                                    todoList={tl}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    changeFilter={changeFilter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n})","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nexport const TriggersTooltips = () => {\r\n    debugger\r\n    console.log('TriggersTooltips')\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleTooltipOpen = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n    return (\r\n        <Grid container direction={'row'} justify={'center'} alignItems={'center'} style={{width: '300px'}}>\r\n            <Grid item>\r\n                <Tooltip\r\n                    open={open}\r\n                    placement=\"top-start\"\r\n                    title={\r\n                        <Grid item style={{width: '150px'}}>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}>here</a>\r\n                            </p>\r\n                            <p>Test Email: free@samuraijs.com</p>\r\n                            <p>Test Password: free</p>\r\n                        </Grid>\r\n                    }\r\n                >\r\n                    <Grid item>\r\n                        <InfoIcon style={{marginTop: '3px'}} color={'inherit'} onClick={handleTooltipOpen}/>\r\n                    </Grid>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {TriggersTooltips} from './icon/InfoIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport {ErrorSnackbar} from '../../components/errorSnackbar/ErrorSnackbar'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport {RequestStatusType} from '../../app/app-reducer';\r\n\r\n\r\nexport const Login = React.memo(() => {\r\n    debugger\r\n    console.log('Login')\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more.';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Must be 15 characters or less';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            debugger\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    if (isLoggedIn) {\r\n        debugger\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    debugger\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\" style={{marginTop: '95px'}}>\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <TriggersTooltips/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    <Grid item>\r\n                        Sign in\r\n                    </Grid>\r\n\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        type=\"email\"\r\n                        autoFocus\r\n                        helperText={formik.touched.email && formik.errors.email}\r\n                        error={formik.touched.email && !!formik.errors.email}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","export default __webpack_public_path__ + \"static/media/Error404.d9af2882.png\";","import React, {useCallback} from 'react'\r\nimport Error404Img from '../../assets/images/Error404.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport s from './Error404.module.css'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport const Error404 = () => {\r\n\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        history.goBack();\r\n    }, [history])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src={Error404Img} alt={'Error 404: PAGE NOT FOUND'}/>\r\n            <Button\r\n                variant={'contained'}\r\n                size={'small'}\r\n                color={'secondary'}\r\n                onClick={onClickHandler}\r\n            >\r\n                Take me back\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Menu from '@material-ui/icons/Menu';\r\nimport {TaskType} from '../api/todolist-api';\r\nimport {TodoListsList} from '../features/todolistsList/TodoListsList';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/errorSnackbar/ErrorSnackbar';\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from '../features/login/Login';\r\nimport {Error404} from '../components/pages/Error404';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {logoutTC} from '../features/login/auth-reducer';\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    console.log('App')\r\n    debugger\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    console.log('App Status ' + status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    console.log('App isInitialized ' + isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    console.log('App isLoggedIn ' + isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        debugger\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isInitialized) {\r\n        debugger\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    debugger\r\n    return (\r\n        <div>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    {\r\n                        isLoggedIn && <Button\r\n                            color={'inherit'}\r\n                            variant={'outlined'}\r\n                            onClick={onClickHandler}>\r\n                            Logout\r\n                        </Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {status === 'loading' && <LinearProgress color=\"secondary\" style={{position: 'fixed', width: '100%'}}/>}\r\n\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodoListsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n//types\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TasksActionsType, tasksReducer} from '../features/todolistsList/tasks-reducer';\r\nimport {TodoListsActionsType, todoListsReducer} from '../features/todolistsList/todoLists-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport {AuthActionsType, authReducer} from '../features/login/auth-reducer';\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\nexport type AppRootActionsType =\r\n    | TodoListsActionsType\r\n    | TasksActionsType\r\n    | AppActionsType\r\n    | AuthActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppRootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}