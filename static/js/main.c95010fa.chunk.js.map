{"version":3,"sources":["components/pages/Error404.module.css","serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/todolistsList/todoLists-reducer.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","features/todolistsList/tasks-reducer.ts","features/todolistsList/todolist/task/Task.tsx","features/todolistsList/todolist/Todolist.tsx","features/todolistsList/TodoListsList.tsx","components/errorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","assets/images/Error404.png","components/pages/Error404.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResponseStatuses","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","todolistId","delete","put","taskId","model","authApi","data","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","removeTodoListAC","id","changeTodoListTitleAC","changeTodolistEntityStatusAC","entityStatus","AddItemForm","React","memo","addItem","disabled","useState","newItemTitle","setNewItemTitle","setError","onChangeHandler","useCallback","e","currentTarget","onClickAddItem","trim","onKeyPressHandler","key","TextField","variant","placeholder","onChange","onKeyPress","label","helperText","size","onBlur","IconButton","onClick","AddBox","EditableSpan","onChangeTitle","editMode","setEditMode","itemTitle","setItemTitle","offEditMode","Input","color","autoFocus","onDoubleClick","setTasksAC","todoListId","tasks","removeTaskAC","changeTaskAC","changeTaskEntityStatusAC","updateTaskTC","domainModel","getState","a","changedTask","find","t","apiModel","startDate","priority","deadline","description","res","resultCode","succeeded","Task","task","useDispatch","onRemoveHandler","onChangeChecked","checked","Completed","New","changedTitle","taskClasses","className","Checkbox","TodoList","changeTodoListTitle","removeTodolist","changeFilter","filter","useSelector","state","useEffect","items","fetchTasksTC","newTasks","getTaskForTodoList","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onClickRemoveTodolist","addNewTask","item","addNewTaskTC","onChangeTodoListTitle","style","listStyle","paddingLeft","map","Button","marginLeft","TodoListsList","todoLists","auth","addTodoList","todoList","addTodoListTC","changeTodoListTitleTC","changeTodoListFilterAC","Grid","container","padding","spacing","tl","Paper","elevation","to","Alert","props","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","Error404","history","useHistory","s","src","Error404Img","alt","push","App","AppBar","position","Toolbar","justifyContent","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducers","combineReducers","action","forEach","stateCopy","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c95010fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__19vDO\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': '56cc9d09-6ac5-48a7-98d1-6f7ea21ef704',\r\n    },\r\n})\r\n\r\n//api\r\nexport const todoListApi = {\r\n    getTodos() {\r\n        return instance.get<TodoListType[]>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoListType }>>('/todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{ userId: number }>>(`/auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeResponseType>>(`/auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n    },\r\n}\r\n\r\n//types\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: 0 | 1 | 10\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport enum ResponseStatuses {\r\n    succeeded = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}\r\n\r\nexport type TaskType = {\r\n    todoListId: string\r\n    id: string\r\n    title: string\r\n    description: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeResponseType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {CommonResponseType} from '../api/todolist-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorUtilsDispatchType>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorUtilsDispatchType>, data: CommonResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some ERROR'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\ntype ErrorUtilsDispatchType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType","import {\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType,\r\n    setIsInitializedAC,\r\n    SetIsInitializedActionType\r\n} from '../../app/app-reducer'\r\nimport {AppThunk} from '../../app/store';\r\nimport {authApi, LoginParamsType, ResponseStatuses} from '../../api/todolist-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await authApi.login(data)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const logoutTC = (): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await authApi.logout()\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n// types\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\nexport type AuthActionsType =\r\n    | SetIsLoggedInActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n","import {AppThunk} from './store';\r\nimport {authApi, ResponseStatuses} from '../api/todolist-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {setIsLoggedInAC, SetIsLoggedInActionType} from '../features/login/auth-reducer';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'App/SET-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'App/SET-ERROR':\r\n            return {...state, error: action.error}\r\n\r\n        case 'App/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'App/SET-STATUS', status} as const)\r\n\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({type: 'App/SET-ERROR', error} as const)\r\n\r\nexport const setIsInitializedAC = (value: boolean) =>\r\n    ({type: 'App/SET-IS-INITIALIZED', value} as const)\r\n\r\n\r\n//thunks\r\nexport const initializeAppTC = (): AppThunk =>\r\n    async dispatch => {\r\n        try {\r\n            const res = await authApi.me()\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n            dispatch(setIsInitializedAC(true))\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n//types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport type AppActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetIsLoggedInActionType\r\n    | SetIsInitializedActionType","import {ResponseStatuses, todoListApi, TodoListType} from '../../api/todolist-api';\r\nimport {AppThunk} from '../../app/store';\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\nexport type InitialTodoListsStateType = typeof initialState\r\n\r\n\r\nexport const todoListsReducer = (state = initialState, action: TodoListsActionsType): InitialTodoListsStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'Todo/SET-TODOLISTS':\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n\r\n        case 'Todo/REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n\r\n        case 'Todo/ADD-NEW-TODOLIST':\r\n            return [{...action.todoList, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'Todo/CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n\r\n        case 'Todo/CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.value} : tl)\r\n\r\n        case 'Todo/CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) =>\r\n    ({type: 'Todo/SET-TODOLISTS', todoLists} as const)\r\n\r\nexport const removeTodoListAC = (id: string) =>\r\n    ({type: 'Todo/REMOVE-TODOLIST', id} as const)\r\n\r\nexport const addNewTodoListAC = (todoList: TodoListType) =>\r\n    ({type: 'Todo/ADD-NEW-TODOLIST', todoList} as const)\r\n\r\nexport const changeTodoListTitleAC = (title: string, id: string) =>\r\n    ({type: 'Todo/CHANGE-TODOLIST-TITLE', title, id} as const)\r\n\r\nexport const changeTodoListFilterAC = (value: FilterValuesType, id: string) =>\r\n    ({type: 'Todo/CHANGE-TODOLIST-FILTER', value, id} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (entityStatus: RequestStatusType, id: string) =>\r\n    ({type: 'Todo/CHANGE-TODOLIST-ENTITY-STATUS', entityStatus, id} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = (): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.getTodos()\r\n            dispatch(setTodoListsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const removeTodoListTC = (id: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC('loading', id))\r\n        try {\r\n            const res = await todoListApi.deleteTodo(id)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(removeTodoListAC(id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const addTodoListTC = (title: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.createTodo(title)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(addNewTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n// export const addTodoListTC = (title: string): AppThunk => dispatch => {\r\n//     dispatch(setAppStatusAC('loading'))\r\n//     todoListApi.createTodo(title)\r\n//         .then(res => {\r\n//             if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n//                 dispatch(addNewTodoListAC(res.data.data.item))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             } else {\r\n//                 handleServerAppError(dispatch, res.data)\r\n//             }\r\n//         })\r\n//         .catch((err: AxiosError) => {\r\n//             handleServerNetworkError(dispatch, err.message)\r\n//         })\r\n// }\r\n\r\n\r\nexport const changeTodoListTitleTC = (id: string, title: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.updateTodoTitle(id, title)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(changeTodoListTitleAC(title, id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type AddNewTodoListActionType = ReturnType<typeof addNewTodoListAC>\r\nexport type ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type ChangeTodoListFilterActionType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type TodoListsActionsType =\r\n    | SetTodoListsActionType\r\n    | RemoveTodoListActionType\r\n    | AddNewTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (newItemTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled}: AddItemFormPropsType) => {\r\n    const [newItemTitle, setNewItemTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItemTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }, [])\r\n\r\n    const onClickAddItem = useCallback(() => {\r\n        if (newItemTitle.trim() !== '') {\r\n            addItem(newItemTitle.trim())\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewItemTitle('')\r\n    }, [addItem, newItemTitle])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        (e.key === 'Enter') && onClickAddItem()\r\n    }, [onClickAddItem])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                error={error}\r\n                placeholder={'Enter a new task'}\r\n                value={newItemTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n                onBlur={() => setError(false)}\r\n                disabled={disabled}\r\n            />\r\n            <IconButton onClick={onClickAddItem} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    disabled?: boolean\r\n    onChangeTitle: (changedTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, disabled, onChangeTitle}: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [itemTitle, setItemTitle] = useState(title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        if (itemTitle.length > 100) {\r\n            setItemTitle(title)\r\n        }\r\n        onChangeTitle(itemTitle)\r\n    }, [onChangeTitle, itemTitle, title])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }, [offEditMode])\r\n    return (\r\n        editMode\r\n            ? <Input\r\n                color={'primary'}\r\n                value={itemTitle}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n    )\r\n})","import {AddNewTodoListActionType, RemoveTodoListActionType, SetTodoListsActionType,} from './todoLists-reducer';\r\nimport {TasksStateType} from '../../app/App';\r\nimport {ResponseStatuses, TaskType, todoListApi, UpdateTaskModelType} from '../../api/todolist-api';\r\nimport {AppRootStateType, AppThunk} from '../../app/store';\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\nexport type InitialTasksStateType = typeof initialState\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: TasksActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'Tasks/SET-TASKS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))\r\n            }\r\n\r\n        case 'Todo/SET-TODOLISTS':\r\n            action.todoLists.forEach(tl => ({...state[tl.id] = []}))\r\n            return {...state}\r\n\r\n        case 'Tasks/REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n\r\n        case 'Tasks/ADD-NEW-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{...action.task, entityStatus: 'idle'}, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        case 'Tasks/CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    ...action.model\r\n                } : t)\r\n            }\r\n\r\n        case 'Todo/ADD-NEW-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n\r\n        case 'Todo/REMOVE-TODOLIST':\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n\r\n        case 'Tasks/CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t, entityStatus: action.entityStatus\r\n                } : t)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTasksAC = (todoListId: string, tasks: TaskType[]) =>\r\n    ({type: 'Tasks/SET-TASKS', todoListId, tasks} as const)\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) =>\r\n    ({type: 'Tasks/REMOVE-TASK', taskId, todoListId} as const)\r\n\r\nexport const addNewTaskAC = (task: TaskType) =>\r\n    ({type: 'Tasks/ADD-NEW-TASK', task} as const)\r\n\r\nexport const changeTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) =>\r\n    ({type: 'Tasks/CHANGE-TASK', taskId, model, todoListId} as const)\r\n\r\nexport const changeTaskEntityStatusAC = (entityStatus: RequestStatusType, todoListId: string, taskId: string) =>\r\n    ({type: 'Tasks/CHANGE-TASK-ENTITY-STATUS', entityStatus, todoListId, taskId} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListId: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.getTasks(todoListId)\r\n            dispatch(setTasksAC(todoListId, res.data.items))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC('loading', todolistId, taskId))\r\n        try {\r\n            const res = await todoListApi.deleteTask(todolistId, taskId)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const addNewTaskTC = (todolistId: string, title: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.createTask(todolistId, title)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(addNewTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const updateTaskTC = (todolistId: string, domainModel: UpdateDomainTaskModelType, taskId: string): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const changedTask = getState().tasks[todolistId].find(t => t.id === taskId)\r\n        if (changedTask) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: changedTask.title,\r\n                status: changedTask.status,\r\n                startDate: changedTask.startDate,\r\n                priority: changedTask.priority,\r\n                deadline: changedTask.deadline,\r\n                description: changedTask.description,\r\n                ...domainModel\r\n            }\r\n            dispatch(setAppStatusAC('loading'))\r\n            try {\r\n                const res = await todoListApi.updateTask(todolistId, taskId, apiModel)\r\n                if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                    dispatch(changeTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            } catch (err) {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            }\r\n        }\r\n    }\r\n\r\n//types\r\nexport type SetTaskActionType = ReturnType<typeof setTasksAC>\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddNewTaskActionType = ReturnType<typeof addNewTaskAC>\r\nexport type ChangeTaskActionType = ReturnType<typeof changeTaskAC>\r\nexport type ChangeTaskEntityStatusActionType = ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nexport type TasksActionsType =\r\n    | SetTaskActionType\r\n    | RemoveTaskActionType\r\n    | AddNewTaskActionType\r\n    | ChangeTaskActionType\r\n    | AddNewTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTaskEntityStatusActionType\r\n\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from '../../../../components/editableSpan/EditableSpan';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch} from 'react-redux';\r\nimport {removeTaskTC, updateTaskTC} from '../../tasks-reducer';\r\nimport {TaskStatuses} from '../../../../api/todolist-api';\r\nimport {RequestStatusType} from '../../../../app/app-reducer';\r\nimport {TaskDomainType} from '../../../../app/App';\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string\r\n    task: TaskDomainType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const Task = React.memo(({todoListId, task, entityStatus}: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onRemoveHandler = useCallback(() => dispatch(removeTaskTC(todoListId, task.id)), [dispatch, task, todoListId])\r\n\r\n    const onChangeChecked = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTaskTC(todoListId, {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}, task.id))\r\n    }, [dispatch, task, todoListId])\r\n\r\n    const onChangeTitle = useCallback((changedTitle: string) => dispatch(updateTaskTC(todoListId, {title: changedTitle}, task.id)), [dispatch, task, todoListId])\r\n\r\n    const taskClasses = task.status === TaskStatuses.Completed ? 'isDone' : ''\r\n\r\n    return (\r\n        <li key={task.id}>\r\n            <span className={taskClasses}>\r\n                <Checkbox\r\n                    color={'primary'}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeChecked}\r\n                    disabled={entityStatus === 'loading'}\r\n                />\r\n                <EditableSpan\r\n                    title={task.title}\r\n                    onChangeTitle={onChangeTitle}\r\n                    disabled={entityStatus === 'loading'}\r\n                />\r\n            </span>\r\n            <IconButton\r\n                onClick={onRemoveHandler}\r\n                disabled={entityStatus === 'loading'}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/addItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/editableSpan/EditableSpan';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {addNewTaskTC, fetchTasksTC} from '../tasks-reducer';\r\nimport {Task} from './task/Task';\r\nimport {TaskStatuses} from '../../../api/todolist-api';\r\nimport {FilterValuesType} from '../todoLists-reducer';\r\nimport {RequestStatusType} from '../../../app/app-reducer';\r\nimport {TaskDomainType} from '../../../app/App';\r\n\r\n\r\nexport type TodoListPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\n\r\nexport const TodoList = React.memo(({\r\n                                        todoListId,\r\n                                        changeTodoListTitle,\r\n                                        removeTodolist,\r\n                                        changeFilter,\r\n                                        title,\r\n                                        filter,\r\n                                        entityStatus\r\n                                    }: TodoListPropsType) => {\r\n    const tasks = useSelector<AppRootStateType, Array<TaskDomainType>>(state => state.tasks[todoListId])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(todoListId))\r\n    }, [dispatch, todoListId])\r\n\r\n    const getTaskForTodoList = () => {\r\n        switch (filter) {\r\n            case 'active':\r\n                return tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'completed':\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const newTasks = getTaskForTodoList()\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter('all', todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter('active', todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter('completed', todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onClickRemoveTodolist = useCallback(() => {\r\n        removeTodolist(todoListId)\r\n    }, [removeTodolist, todoListId])\r\n\r\n    const addNewTask = useCallback((newItemTitle: string) => dispatch(addNewTaskTC(todoListId, newItemTitle)), [dispatch, todoListId])\r\n\r\n    const onChangeTodoListTitle = useCallback((changedTitle: string) => changeTodoListTitle(changedTitle, todoListId), [changeTodoListTitle, todoListId])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={title}\r\n                    onChangeTitle={onChangeTodoListTitle}\r\n                    disabled={entityStatus === 'loading'}\r\n                />\r\n                <IconButton\r\n                    onClick={onClickRemoveTodolist}\r\n                    disabled={entityStatus === 'loading'}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                addItem={addNewTask}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                {\r\n                    newTasks.map(t => {\r\n                        return (\r\n                            <Task\r\n                                key={t.id}\r\n                                todoListId={todoListId}\r\n                                task={t}\r\n                                entityStatus={t.entityStatus}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onAllClickHandler}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onActiveClickHandler}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onCompletedClickHandler}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    InitialTodoListsStateType,\r\n    removeTodoListTC\r\n} from './todoLists-reducer';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {AddItemForm} from '../../components/addItemForm/AddItemForm';\r\nimport {TodoList} from './todolist/Todolist';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nexport const TodoListsList: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, InitialTodoListsStateType>(state => state.todoLists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    function removeTodolist(todoListId: string) {\r\n        dispatch(removeTodoListTC(todoListId))\r\n    }\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    function changeTodoListTitle(title: string, todoListId: string) {\r\n        dispatch(changeTodoListTitleTC(todoListId, title))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        dispatch(changeTodoListFilterAC(value, todoListId))\r\n    }\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper elevation={4} style={{padding: '15px'}}>\r\n                                <TodoList\r\n                                    todoListId={tl.id}\r\n                                    title={tl.title}\r\n                                    filter={tl.filter}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    changeFilter={changeFilter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more.';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Must be 15 characters or less';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <InfoIcon />\r\n\r\n\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel={'noreferrer'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{'color': 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{'color': 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    {...formik.getFieldProps('rememberMe')}\r\n                                />\r\n                            }\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","export default __webpack_public_path__ + \"static/media/Error404.d9af2882.png\";","import React from 'react'\r\nimport Error404Img from '../../assets/images/Error404.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport s from './Error404.module.css'\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\n\r\nexport const Error404 = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = () => {\r\n        history.push(`/`);\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src={Error404Img} alt={'Error 404: PAGE NOT FOUND'}/>\r\n            <Button\r\n                variant={'contained'}\r\n                size={'small'}\r\n                color={'secondary'}\r\n                onClick={onClickHandler}\r\n            >\r\n                Take me away\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TaskType} from '../api/todolist-api';\r\nimport {TodoListsList} from '../features/todolistsList/TodoListsList';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/errorSnackbar/ErrorSnackbar';\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from '../features/login/Login';\r\nimport {Error404} from '../components/pages/Error404';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {logoutTC} from '../features/login/auth-reducer';\r\n\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    {\r\n                        isLoggedIn && <Button\r\n                            color={'inherit'}\r\n                            variant={'outlined'}\r\n                            onClick={onClickHandler}>\r\n                            Logout\r\n                        </Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodoListsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n//types\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TasksActionsType, tasksReducer} from '../features/todolistsList/tasks-reducer';\r\nimport {TodoListsActionsType, todoListsReducer} from '../features/todolistsList/todoLists-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport {AuthActionsType, authReducer} from '../features/login/auth-reducer';\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\nexport type AppRootActionsType =\r\n    | TodoListsActionsType\r\n    | TasksActionsType\r\n    | AppActionsType\r\n    | AuthActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppRootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}