{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newItemTitle","setNewItemTitle","error","setError","errorMessage","style","color","placeholder","value","onChange","e","currentTarget","onKeyPress","key","addItem","className","onClick","trim","EditableSpan","editMode","setEditMode","title","itemTitle","setItemTitle","offEditMode","onChangeTitle","autoFocus","onBlur","onDoubleClick","Todolist","changedTitle","changeTodoListTitle","todoListId","removeTodolist","addTask","tasks","map","t","id","isDone","type","checked","changeTaskStatus","changeTaskTitle","removeTasks","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","newTask","taskId","newIsDoneChecked","task","find","tl","newTitle","getTasksForTodolist","todoList","todoListComponent","newTodoListID","newTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8c705b28.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newItemTitle: string) => void\r\n}\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [newItemTitle, setNewItemTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItemTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.addItem(newItemTitle);\r\n            setNewItemTitle('')\r\n        }\r\n    }\r\n    const onClickAddItem = () => {\r\n        if (newItemTitle.trim() !== '') {\r\n            props.addItem(newItemTitle.trim())\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewItemTitle('')\r\n    }\r\n    const errorMessage = error && <div style={{color: 'red'}}>Title is required!</div>\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                placeholder={'Enter a new task'}\r\n                value={newItemTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                className={error ? 'error' : ''}\r\n            />\r\n            <button onClick={onClickAddItem}>+</button>\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (changedTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [itemTitle, setItemTitle] = useState(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChangeTitle(itemTitle)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={itemTitle}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\n\r\nexport type TasksPropsType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    tasks: Array<TasksPropsType>\r\n    removeTasks: (id: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneChecked: boolean, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter('all', props.todoListId)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter('active', props.todoListId)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter('completed', props.todoListId)\r\n    }\r\n    const onClickRemoveTodolist = () => {\r\n        props.removeTodolist(props.todoListId)\r\n    }\r\n    const addNewTask = (newItemTitle: string) => props.addTask(newItemTitle, props.todoListId)\r\n    const onChangeTodoListTitle = (changedTitle: string) => props.changeTodoListTitle(changedTitle, props.todoListId)\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChangeTitle={onChangeTodoListTitle}/>\r\n                <button onClick={onClickRemoveTodolist}>X</button>\r\n            </h3>\r\n            <AddItemForm addItem={addNewTask}/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n                        const onRemoveHandler = () => {\r\n                            props.removeTasks(t.id, props.todoListId)\r\n                        }\r\n                        const onChangeChecked = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListId)\r\n                        }\r\n                        const onChangeTitle = (changedTitle: string) => props.changeTaskTitle(t.id, changedTitle, props.todoListId)\r\n\r\n                        return (\r\n                            <li key={t.id} className={t.isDone ? 'isDone' : ''}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={t.isDone}\r\n                                    onChange={onChangeChecked}\r\n                                />\r\n                                <EditableSpan title={t.title} onChangeTitle={onChangeTitle}/>\r\n                                <button onClick={onRemoveHandler}>delete</button>\r\n                            </li>)\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === 'all' ? 'activeFilter' : ''} onClick={onAllClickHandler}> All\r\n                </button>\r\n                <button className={props.filter === 'active' ? 'activeFilter' : ''}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </button>\r\n                <button className={props.filter === 'completed' ? 'activeFilter' : ''}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TasksPropsType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TasksPropsType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n\r\n    //BLL:\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListsType>>([\r\n        {id: todoListID1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true}, //t\r\n            {id: v1(), title: 'JS', isDone: true}, //t\r\n            {id: v1(), title: 'React', isDone: false}, //t\r\n            {id: v1(), title: 'Redux', isDone: false}, //t\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true}, //t\r\n            {id: v1(), title: 'JS', isDone: true}, //t\r\n            {id: v1(), title: 'React', isDone: false}, //t\r\n            {id: v1(), title: 'Redux', isDone: false}, //t\r\n        ],\r\n    })\r\n\r\n    function removeTasks(id: string, todoListId: string) {\r\n        //фильтр, пропусти те таски, id-шки которых не равны удаленной id-шке\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter(t => t.id !== id)}) //setTasks - функция, которая меняет данные и вызывается после логической обработки; в параметрах - отфильтрованный массив\r\n    }\r\n    function addTask(title: string, todoListId: string) {\r\n        const newTask: TasksPropsType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]})\r\n    }\r\n    function changeTaskStatus(taskId: string, newIsDoneChecked: boolean, todoListId: string) {\r\n        let task = tasks[todoListId].find(t => t.id === taskId)\r\n        task && (task.isDone = newIsDoneChecked)\r\n        setTasks({...tasks})\r\n    }\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: value} : tl))\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListsType = {\r\n            id: newTodoListID,\r\n            title,\r\n            filter: 'all'\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListId: string) {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].map(t => t.id === taskId ? {...t, title: newTitle} : t)})\r\n    }\r\n    function changeTodoListTitle(title: string, todoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, title: title} : tl))\r\n    }\r\n    //UI:\r\n    function getTasksForTodolist(todoList: TodoListsType) {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n    function removeTodolist(todoListId: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n    const todoListComponent = todoLists.map(tl => {\r\n            return <Todolist\r\n                key={tl.id}\r\n                todoListId={tl.id}\r\n                title={tl.title}\r\n                tasks={getTasksForTodolist(tl)}\r\n                removeTasks={removeTasks}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeTaskStatus}\r\n                filter={tl.filter}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n            />\r\n        }\r\n    )\r\n    return (\r\n        //JSX\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList} />\r\n            {todoListComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}