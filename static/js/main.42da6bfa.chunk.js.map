{"version":3,"sources":["app/App.module.css","components/pages/Error404.module.css","serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/todolistsList/todoLists-reducer.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","features/todolistsList/tasks-reducer.ts","features/todolistsList/todolist/task/Task.tsx","features/todolistsList/todolist/Todolist.tsx","features/todolistsList/TodoListsList.tsx","components/errorSnackbar/ErrorSnackbar.tsx","features/login/icon/InfoIcon.tsx","features/login/Login.tsx","assets/images/Error404.png","components/pages/Error404.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResponseStatuses","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","todolistId","delete","put","taskId","model","authApi","data","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","type","status","error","isInitialized","removeTodoListAC","id","changeTodoListTitleAC","changeTodolistEntityStatusAC","entityStatus","AddItemForm","memo","addItem","disabled","useState","newItemTitle","setNewItemTitle","setError","onChangeHandler","useCallback","e","currentTarget","value","onClickAddItem","trim","onKeyPressHandler","key","TextField","variant","placeholder","onChange","onKeyPress","label","helperText","size","onBlur","IconButton","onClick","AddBox","EditableSpan","onChangeTitle","editMode","setEditMode","itemTitle","setItemTitle","offEditMode","Input","color","autoFocus","onDoubleClick","setTasksAC","todoListId","tasks","removeTaskAC","changeTaskAC","changeTaskEntityStatusAC","updateTaskTC","domainModel","getState","a","changedTask","find","t","apiModel","startDate","priority","deadline","description","res","resultCode","succeeded","Task","task","useDispatch","onRemoveHandler","onChangeChecked","checked","Completed","New","changedTitle","taskClasses","style","display","justifyContent","alignItems","className","Checkbox","TodoList","props","todoList","changeTodoListTitle","removeTodolist","changeFilter","demo","useSelector","state","useEffect","items","newTasks","filter","getTaskForTodoList","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onClickRemoveTodolist","onChangeTodoListTitle","addNewTask","item","listStyle","paddingLeft","map","Button","marginLeft","TodoListsList","todoLists","auth","addTodoList","addTodoListTC","changeTodoListTitleTC","Grid","container","padding","spacing","tl","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TriggersTooltips","setOpen","direction","justify","width","Tooltip","placement","marginTop","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","classes","useStyles","Container","component","maxWidth","CssBaseline","paper","Avatar","avatar","Typography","handleSubmit","form","noValidate","height","margin","fullWidth","touched","getFieldProps","FormControlLabel","control","submit","isValid","makeStyles","theme","flexDirection","backgroundColor","palette","secondary","main","Error404","history","useHistory","onClickHandler","goBack","s","src","Error404Img","alt","App","AppBar","position","Toolbar","LinearProgress","fixed","exact","path","render","from","circularProgress","CircularProgress","rootReducers","combineReducers","action","forEach","stateCopy","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.42da6bfa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3yL-5\",\"circularProgress\":\"App_circularProgress__ePCZR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__19vDO\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'a53e0f65-c3ac-4834-99fc-a88db669947f',\r\n    },\r\n})\r\n\r\n//api\r\nexport const todoListApi = {\r\n    getTodos() {\r\n        return instance.get<TodoListType[]>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoListType }>>('/todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksResponseType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{ userId?: number }>>(`/auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeResponseType>>(`/auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n    },\r\n}\r\n\r\n//types\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: 0 | 1 | 10\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport enum ResponseStatuses {\r\n    succeeded = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}\r\n\r\nexport type TaskType = {\r\n    todoListId: string\r\n    id: string\r\n    title: string\r\n    description: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\ntype TasksResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeResponseType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {CommonResponseType} from '../api/todolist-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorUtilsDispatchType>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorUtilsDispatchType>, data: CommonResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some ERROR'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\ntype ErrorUtilsDispatchType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType","import {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {AppThunk} from '../../app/store';\r\nimport {authApi, LoginParamsType, ResponseStatuses} from '../../api/todolist-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', isLoggedIn} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await authApi.login(data)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const logoutTC = (): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await authApi.logout()\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n// types\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\nexport type AuthActionsType =\r\n    | SetIsLoggedInActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n","import {AppThunk} from './store';\r\nimport {authApi, ResponseStatuses} from '../api/todolist-api';\r\nimport {setIsLoggedInAC, SetIsLoggedInActionType} from '../features/login/auth-reducer';\r\nimport {handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'App/SET-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'App/SET-ERROR':\r\n            return {...state, error: action.error}\r\n\r\n        case 'App/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'App/SET-STATUS', status} as const)\r\n\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({type: 'App/SET-ERROR', error} as const)\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'App/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n\r\n//thunks\r\nexport const initializeAppTC = (): AppThunk =>\r\n    async dispatch => {\r\n        try {\r\n            const res = await authApi.me()\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                dispatch(setIsLoggedInAC(false)) //в данном приложении не нужен, т.к. и initialState === false\r\n                dispatch(setAppStatusAC('failed')) //тоже нет необходимости\r\n                // handleServerAppError(dispatch, res.data)\r\n            }\r\n            dispatch(setIsInitializedAC(true))\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport type AppActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetIsLoggedInActionType\r\n    | SetIsInitializedActionType","import {ResponseStatuses, todoListApi, TodoListType} from '../../api/todolist-api';\r\nimport {AppThunk} from '../../app/store';\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\nexport type InitialTodoListsStateType = typeof initialState\r\n\r\n\r\nexport const todoListsReducer = (state = initialState, action: TodoListsActionsType): InitialTodoListsStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'todo/SET-TODOLISTS':\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n\r\n        case 'todo/REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n\r\n        case 'todo/ADD-NEW-TODOLIST':\r\n            return [{...action.todoList, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'todo/CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n\r\n        case 'todo/CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n\r\n        case 'todo/CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) =>\r\n    ({type: 'todo/SET-TODOLISTS', todoLists} as const)\r\n\r\nexport const removeTodoListAC = (id: string) =>\r\n    ({type: 'todo/REMOVE-TODOLIST', id} as const)\r\n\r\nexport const addNewTodoListAC = (todoList: TodoListType) =>\r\n    ({type: 'todo/ADD-NEW-TODOLIST', todoList} as const)\r\n\r\nexport const changeTodoListTitleAC = (title: string, id: string) =>\r\n    ({type: 'todo/CHANGE-TODOLIST-TITLE', title, id} as const)\r\n\r\nexport const changeTodoListFilterAC = (filter: FilterValuesType, id: string) =>\r\n    ({type: 'todo/CHANGE-TODOLIST-FILTER', filter, id} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (entityStatus: RequestStatusType, id: string) =>\r\n    ({type: 'todo/CHANGE-TODOLIST-ENTITY-STATUS', entityStatus, id} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = (): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.getTodos()\r\n            dispatch(setTodoListsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const removeTodoListTC = (id: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC('loading', id))\r\n        try {\r\n            const res = await todoListApi.deleteTodo(id)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(removeTodoListAC(id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const addTodoListTC = (title: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.createTodo(title)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(addNewTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const changeTodoListTitleTC = (id: string, title: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.updateTodoTitle(id, title)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(changeTodoListTitleAC(title, id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type AddNewTodoListActionType = ReturnType<typeof addNewTodoListAC>\r\nexport type ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type ChangeTodoListFilterActionType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type TodoListsActionsType =\r\n    | SetTodoListsActionType\r\n    | RemoveTodoListActionType\r\n    | AddNewTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\n","import React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (newItemTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm: FC<AddItemFormPropsType> = memo(({addItem, disabled = false}) => {\r\n\r\n    const [newItemTitle, setNewItemTitle] = useState('')\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItemTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }, [])\r\n\r\n    const onClickAddItem = useCallback(() => {\r\n        if (newItemTitle.trim() !== '') {\r\n            addItem(newItemTitle.trim())\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewItemTitle('')\r\n    }, [addItem, newItemTitle])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) =>\r\n        (e.key === 'Enter') && onClickAddItem(), [onClickAddItem])\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                error={error}\r\n                placeholder={'Enter a new task'}\r\n                value={newItemTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n                onBlur={() => setError(false)}\r\n                disabled={disabled}\r\n            />\r\n            <IconButton onClick={onClickAddItem} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useState} from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    disabled?: boolean\r\n    onChangeTitle: (changedTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: FC<EditableSpanPropsType> = memo(({title, disabled = false, onChangeTitle}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [itemTitle, setItemTitle] = useState(title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        if (itemTitle.length > 100) {\r\n            setItemTitle(title)\r\n        }\r\n        onChangeTitle(itemTitle)\r\n    }, [onChangeTitle, itemTitle, title])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n        setItemTitle(e.currentTarget.value), [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }, [offEditMode])\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <Input\r\n                color={'primary'}\r\n                value={itemTitle}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n    )\r\n})","import {AddNewTodoListActionType, RemoveTodoListActionType, SetTodoListsActionType,} from './todoLists-reducer';\r\nimport {TasksStateType} from '../../app/App';\r\nimport {ResponseStatuses, TaskType, todoListApi, UpdateTaskModelType} from '../../api/todolist-api';\r\nimport {AppRootStateType, AppThunk} from '../../app/store';\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\nexport type InitialTasksStateType = typeof initialState\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: TasksActionsType): InitialTasksStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'tasks/SET-TASKS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))\r\n            }\r\n\r\n        case 'todo/SET-TODOLISTS':\r\n            action.todoLists.forEach(tl => ({...state[tl.id] = []}))\r\n            return {...state}\r\n\r\n        case 'tasks/REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n\r\n        case 'tasks/ADD-NEW-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{...action.task, entityStatus: 'idle'}, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        case 'tasks/CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n\r\n        case 'tasks/CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    entityStatus: action.entityStatus\r\n                } : t)\r\n            }\r\n\r\n        case 'todo/ADD-NEW-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n\r\n        case 'todo/REMOVE-TODOLIST':\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTasksAC = (todoListId: string, tasks: TaskType[]) =>\r\n    ({type: 'tasks/SET-TASKS', todoListId, tasks} as const)\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) =>\r\n    ({type: 'tasks/REMOVE-TASK', taskId, todoListId} as const)\r\n\r\nexport const addNewTaskAC = (task: TaskType) =>\r\n    ({type: 'tasks/ADD-NEW-TASK', task} as const)\r\n\r\nexport const changeTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) =>\r\n    ({type: 'tasks/CHANGE-TASK', taskId, model, todoListId} as const)\r\n\r\nexport const changeTaskEntityStatusAC = (entityStatus: RequestStatusType, todoListId: string, taskId: string) =>\r\n    ({type: 'tasks/CHANGE-TASK-ENTITY-STATUS', entityStatus, todoListId, taskId} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListId: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.getTasks(todoListId)\r\n            dispatch(setAppStatusAC('loading')) //под вопросом\r\n            dispatch(setTasksAC(todoListId, res.data.items))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC('loading', todolistId, taskId))\r\n        try {\r\n            const res = await todoListApi.deleteTask(todolistId, taskId)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const addNewTaskTC = (todolistId: string, title: string): AppThunk =>\r\n    async dispatch => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        try {\r\n            const res = await todoListApi.createTask(todolistId, title)\r\n            if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                dispatch(addNewTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        }\r\n    }\r\n\r\nexport const updateTaskTC = (todolistId: string, domainModel: UpdateDomainTaskModelType, taskId: string): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const changedTask = getState().tasks[todolistId].find(t => t.id === taskId)\r\n        if (changedTask) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: changedTask.title,\r\n                status: changedTask.status,\r\n                startDate: changedTask.startDate,\r\n                priority: changedTask.priority,\r\n                deadline: changedTask.deadline,\r\n                description: changedTask.description,\r\n                ...domainModel\r\n            }\r\n            dispatch(setAppStatusAC('loading'))\r\n            try {\r\n                const res = await todoListApi.updateTask(todolistId, taskId, apiModel)\r\n                if (res.data.resultCode === ResponseStatuses.succeeded) {\r\n                    dispatch(changeTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            } catch (err) {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            }\r\n        }\r\n    }\r\n\r\n//types\r\nexport type SetTaskActionType = ReturnType<typeof setTasksAC>\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddNewTaskActionType = ReturnType<typeof addNewTaskAC>\r\nexport type ChangeTaskActionType = ReturnType<typeof changeTaskAC>\r\nexport type ChangeTaskEntityStatusActionType = ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nexport type TasksActionsType =\r\n    | SetTaskActionType\r\n    | RemoveTaskActionType\r\n    | AddNewTaskActionType\r\n    | ChangeTaskActionType\r\n    | AddNewTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTaskEntityStatusActionType\r\n\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, FC, memo, useCallback} from 'react';\r\nimport {EditableSpan} from '../../../../components/editableSpan/EditableSpan';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch} from 'react-redux';\r\nimport {removeTaskTC, updateTaskTC} from '../../tasks-reducer';\r\nimport {TaskStatuses} from '../../../../api/todolist-api';\r\nimport {RequestStatusType} from '../../../../app/app-reducer';\r\nimport {TaskDomainType} from '../../../../app/App';\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string\r\n    task: TaskDomainType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const Task: FC<TaskPropsType> = memo(({todoListId, task, entityStatus}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onRemoveHandler = useCallback(() =>\r\n        dispatch(removeTaskTC(todoListId, task.id)), [dispatch, task, todoListId])\r\n\r\n    const onChangeChecked = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTaskTC(todoListId, {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}, task.id))\r\n    }, [dispatch, task, todoListId])\r\n\r\n    const onChangeTitle = useCallback((changedTitle: string) =>\r\n        dispatch(updateTaskTC(todoListId, {title: changedTitle}, task.id)), [dispatch, task, todoListId])\r\n\r\n    const taskClasses = task.status === TaskStatuses.Completed ? 'isDone' : ''\r\n\r\n    return (\r\n        <li key={task.id} style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\r\n            <span className={taskClasses}>\r\n                <Checkbox\r\n                    color={'primary'}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeChecked}\r\n                    disabled={entityStatus === 'loading'}\r\n                />\r\n                <EditableSpan\r\n                    title={task.title}\r\n                    onChangeTitle={onChangeTitle}\r\n                    disabled={entityStatus === 'loading'}\r\n                />\r\n            </span>\r\n            <IconButton\r\n                onClick={onRemoveHandler}\r\n                disabled={entityStatus === 'loading'}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n","import React, {FC, memo, useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/addItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/editableSpan/EditableSpan';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {addNewTaskTC, fetchTasksTC} from '../tasks-reducer';\r\nimport {Task} from './task/Task';\r\nimport {TaskStatuses} from '../../../api/todolist-api';\r\nimport {FilterValuesType, TodoListDomainType} from '../todoLists-reducer';\r\nimport {RequestStatusType} from '../../../app/app-reducer';\r\nimport {TaskDomainType} from '../../../app/App';\r\n\r\n\r\nexport type TodoListPropsType = {\r\n    todoList: TodoListDomainType\r\n    entityStatus: RequestStatusType\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodoList: FC<TodoListPropsType> = memo(props => {\r\n    const {todoList, changeTodoListTitle, removeTodolist, changeFilter, entityStatus, demo = false,} = props\r\n\r\n    const tasks = useSelector<AppRootStateType, Array<TaskDomainType>>(state => state.tasks[todoList.id])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTasksTC(todoList.id))\r\n    }, [dispatch, todoList, demo])\r\n\r\n    const getTaskForTodoList = () => {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'completed':\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const newTasks = getTaskForTodoList()\r\n\r\n    const onAllClickHandler = useCallback(() =>\r\n        changeFilter('all', todoList.id), [changeFilter, todoList.id])\r\n\r\n    const onActiveClickHandler = useCallback(() =>\r\n        changeFilter('active', todoList.id), [changeFilter, todoList.id])\r\n\r\n    const onCompletedClickHandler = useCallback(() =>\r\n        changeFilter('completed', todoList.id), [changeFilter, todoList.id])\r\n\r\n    const onClickRemoveTodolist = useCallback(() =>\r\n        removeTodolist(todoList.id), [removeTodolist, todoList.id])\r\n\r\n    const onChangeTodoListTitle = useCallback((changedTitle: string) =>\r\n        changeTodoListTitle(changedTitle, todoList.id), [changeTodoListTitle, todoList.id])\r\n\r\n    const addNewTask = useCallback((newItemTitle: string) =>\r\n        dispatch(addNewTaskTC(todoList.id, newItemTitle)), [dispatch, todoList.id])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3 style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\r\n                <EditableSpan\r\n                    title={todoList.title}\r\n                    onChangeTitle={onChangeTodoListTitle}\r\n                    disabled={entityStatus === 'loading'}\r\n                />\r\n                <IconButton\r\n                    onClick={onClickRemoveTodolist}\r\n                    disabled={entityStatus === 'loading'}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                addItem={addNewTask}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                {\r\n                    newTasks.map(t => {\r\n                        return (\r\n                            <Task\r\n                                key={t.id}\r\n                                todoListId={todoList.id}\r\n                                task={t}\r\n                                entityStatus={t.entityStatus}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={todoList.filter === 'all' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onAllClickHandler}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={todoList.filter === 'active' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onActiveClickHandler}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={todoList.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onCompletedClickHandler}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    InitialTodoListsStateType,\r\n    removeTodoListTC\r\n} from './todoLists-reducer';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {AddItemForm} from '../../components/addItemForm/AddItemForm';\r\nimport {TodoList} from './todolist/Todolist';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoListsList: FC<PropsType> = memo(({demo = false}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, InitialTodoListsStateType>(state => state.todoLists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch, isLoggedIn, demo])\r\n\r\n    const removeTodolist = useCallback((todoListId: string) =>\r\n        dispatch(removeTodoListTC(todoListId)), [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) =>\r\n        dispatch(addTodoListTC(title)), [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((title: string, todoListId: string) =>\r\n        dispatch(changeTodoListTitleTC(todoListId, title)), [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListId: string) =>\r\n        dispatch(changeTodoListFilterAC(value, todoListId)), [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper elevation={4} style={{padding: '15px'}}>\r\n                                <TodoList\r\n                                    todoList={tl}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    changeFilter={changeFilter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n})","import React, {FC} from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {FC, useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\n\r\nexport const TriggersTooltips: FC = () => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleTooltipOpen = () => setOpen(!open)\r\n\r\n\r\n    return (\r\n        <Grid container direction={'row'} justify={'center'} alignItems={'center'} style={{width: '300px'}}>\r\n            <Grid item>\r\n                <Tooltip\r\n                    open={open}\r\n                    placement=\"top-start\"\r\n                    title={\r\n                        <Grid item style={{width: '150px'}}>\r\n                            {/*<p>To log in get registered*/}\r\n                            {/*    <Link href={'https://social-network.samuraijs.com/'}>here</Link>*/}\r\n                            {/*</p>*/}\r\n                            <p>Test Email: free@samuraijs.com</p>\r\n                            <p>Test Password: free</p>\r\n                        </Grid>\r\n                    }\r\n                >\r\n                    <Grid item>\r\n                        <InfoIcon style={{marginTop: '3px'}} color={'inherit'} onClick={handleTooltipOpen}/>\r\n                    </Grid>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","import React, {FC, memo} from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {TriggersTooltips} from './icon/InfoIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport {ErrorSnackbar} from '../../components/errorSnackbar/ErrorSnackbar'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport {RequestStatusType} from '../../app/app-reducer';\r\n\r\n\r\nexport const Login: FC = memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more.';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Must be 15 characters or less';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\" style={{marginTop: '95px'}}>\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <TriggersTooltips/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    <Grid item>\r\n                        Sign in\r\n                    </Grid>\r\n\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit} className={classes.form} noValidate>\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        label=\"Test Email: free@samuraijs.com\"\r\n                        type=\"email\"\r\n                        helperText={formik.touched.email && formik.errors.email}\r\n                        error={formik.touched.email && !!formik.errors.email}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n\r\n                    <TextField\r\n                        style={{height: '65px'}}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        label=\"Test Password: free\"\r\n                        type=\"password\"\r\n                        helperText={formik.touched.password && formik.errors.password}\r\n                        error={formik.touched.password && !!formik.errors.password}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={!formik.isValid || status === 'loading'}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    )\r\n})\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","export default __webpack_public_path__ + \"static/media/Error404.d9af2882.png\";","import React, {FC, useCallback} from 'react'\r\nimport Error404Img from '../../assets/images/Error404.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport s from './Error404.module.css'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport const Error404: FC = () => {\r\n\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = useCallback(() =>\r\n        history.goBack(), [history])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src={Error404Img} alt={'Error 404: PAGE NOT FOUND'}/>\r\n            <Button\r\n                variant={'contained'}\r\n                size={'small'}\r\n                color={'secondary'}\r\n                onClick={onClickHandler}\r\n            >\r\n                Back\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, {FC, useCallback, useEffect} from 'react';\r\nimport s from './App.module.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Menu from '@material-ui/icons/Menu';\r\nimport {TaskType} from '../api/todolist-api';\r\nimport {TodoListsList} from '../features/todolistsList/TodoListsList';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/errorSnackbar/ErrorSnackbar';\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from '../features/login/Login';\r\nimport {Error404} from '../components/pages/Error404';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {logoutTC} from '../features/login/auth-reducer';\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst App: FC<PropsType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div className={s.circularProgress}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    {\r\n                        isLoggedIn && <Button\r\n                            color={'inherit'}\r\n                            variant={'outlined'}\r\n                            onClick={onClickHandler}>\r\n                            Logout\r\n                        </Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {status === 'loading' && <LinearProgress color=\"secondary\" style={{position: 'fixed', width: '100%'}}/>}\r\n\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodoListsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n//types\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TasksActionsType, tasksReducer} from '../features/todolistsList/tasks-reducer';\r\nimport {TodoListsActionsType, todoListsReducer} from '../features/todolistsList/todoLists-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport {AuthActionsType, authReducer} from '../features/login/auth-reducer';\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\nexport type AppRootActionsType =\r\n    | TodoListsActionsType\r\n    | TasksActionsType\r\n    | AppActionsType\r\n    | AuthActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppRootActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}