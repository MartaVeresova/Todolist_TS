{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","features/todolistsList/todoLists-reducer.ts","features/todolistsList/tasks-reducer.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","features/todolistsList/todolist/task/Task.tsx","features/todolistsList/todolist/Todolist.tsx","features/todolistsList/TodoListsList.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ACTIONS_TODO_TYPE","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","todolistId","delete","put","taskId","model","ACTIONS_TASK_TYPE","initialState","fetchTodoListsTC","dispatch","then","res","todoLists","data","type","SET_TODOLISTS","removeTodoListTC","id","REMOVE_TODOLIST","removeTodoListAC","addTodoListTC","todoList","item","ADD_NEW_TODOLIST","changeTodoListTitleTC","CHANGE_TODOLIST_TITLE","changeTodoListTitleAC","AddItemForm","React","memo","addItem","useState","newItemTitle","setNewItemTitle","error","setError","onChangeHandler","useCallback","e","currentTarget","value","onClickAddItem","trim","onKeyPressHandler","key","TextField","variant","placeholder","onChange","onKeyPress","label","helperText","size","onBlur","IconButton","onClick","AddBox","EditableSpan","onChangeTitle","editMode","setEditMode","itemTitle","setItemTitle","offEditMode","Input","color","autoFocus","onDoubleClick","fetchTasksTC","todoListId","tasks","SET_TASKS","setTasksAC","items","removeTaskTC","REMOVE_TASK","removeTaskAC","addNewTaskTC","task","ADD_NEW_TASK","updateTaskTC","domainModel","getState","changedTask","find","t","apiModel","status","startDate","priority","deadline","description","CHANGE_TASK","changeTaskAC","Task","useDispatch","onRemoveHandler","onChangeChecked","checked","Completed","New","changedTitle","taskClasses","className","Checkbox","Delete","TodoList","changeTodoListTitle","removeTodolist","changeFilter","filter","useSelector","state","useEffect","newTasks","getTaskForTodoList","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onClickRemoveTodolist","addNewTask","onChangeTodoListTitle","style","listStyle","paddingLeft","map","Button","marginLeft","TodoListsList","addTodoList","CHANGE_TODOLIST_FILTER","changeTodoListFilterAC","Grid","container","padding","spacing","tl","Paper","elevation","App","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","rootReducers","combineReducers","action","forEach","stateCopy","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c856086a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': '56cc9d09-6ac5-48a7-98d1-6f7ea21ef704',\r\n    },\r\n})\r\n\r\n//api\r\nexport const todoListApi = {\r\n    getTodos() {\r\n        return instance.get<TodoListType[]>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoListType }>>('/todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n//types\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: 0 | 1 | 10\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\nexport type TaskType = {\r\n    todoListId: string\r\n    id: string\r\n    title: string\r\n    description: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import {todoListApi, TodoListType} from '../../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppActionsType, AppThunk} from '../../app/store';\r\n\r\n\r\nexport enum ACTIONS_TODO_TYPE {\r\n    SET_TODOLISTS = 'SET-TODOLISTS',\r\n    REMOVE_TODOLIST = 'REMOVE-TODOLIST',\r\n    ADD_NEW_TODOLIST = 'ADD-NEW-TODOLIST',\r\n    CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE',\r\n    CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER',\r\n}\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport type InitialTodoListsStateType = typeof initialState\r\n\r\nexport const todoListsReducer = (state = initialState, action: TodoListsActionsType): InitialTodoListsStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TODO_TYPE.SET_TODOLISTS:\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all'}))\r\n\r\n        case ACTIONS_TODO_TYPE.REMOVE_TODOLIST:\r\n            return state.filter(tl => tl.id !== action.id)\r\n\r\n        case ACTIONS_TODO_TYPE.ADD_NEW_TODOLIST:\r\n            return [{...action.todoList, filter: 'all'}, ...state]\r\n\r\n        case ACTIONS_TODO_TYPE.CHANGE_TODOLIST_TITLE:\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n\r\n        case ACTIONS_TODO_TYPE.CHANGE_TODOLIST_FILTER:\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.value} : tl)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) =>\r\n    ({type: ACTIONS_TODO_TYPE.SET_TODOLISTS, todoLists} as const)\r\n\r\nexport const removeTodoListAC = (id: string) =>\r\n    ({type: ACTIONS_TODO_TYPE.REMOVE_TODOLIST, id} as const)\r\n\r\nexport const addNewTodoListAC = (todoList: TodoListType) =>\r\n    ({type: ACTIONS_TODO_TYPE.ADD_NEW_TODOLIST, todoList} as const)\r\n\r\nexport const changeTodoListTitleAC = (title: string, id: string) =>\r\n    ({type: ACTIONS_TODO_TYPE.CHANGE_TODOLIST_TITLE, title, id} as const)\r\n\r\nexport const changeTodoListFilterAC = (value: FilterValuesType, id: string) =>\r\n    ({type: ACTIONS_TODO_TYPE.CHANGE_TODOLIST_FILTER, value, id} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = () => (dispatch: Dispatch<AppActionsType>) => {\r\n    todoListApi.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodoListsAC(res.data))\r\n        })\r\n}\r\n\r\nexport const removeTodoListTC = (id: string): AppThunk => dispatch => {\r\n    todoListApi.deleteTodo(id)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC(id))\r\n        })\r\n}\r\n\r\nexport const addTodoListTC = (title: string): AppThunk => dispatch => {\r\n    todoListApi.createTodo(title)\r\n        .then(res => {\r\n            dispatch(addNewTodoListAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const changeTodoListTitleTC = (id: string, title: string): AppThunk => dispatch => {\r\n    todoListApi.updateTodoTitle(id, title)\r\n        .then(() => {\r\n            dispatch(changeTodoListTitleAC(title, id))\r\n        })\r\n}\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type AddNewTodoListActionType = ReturnType<typeof addNewTodoListAC>\r\nexport type ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type ChangeTodoListFilterActionType = ReturnType<typeof changeTodoListFilterAC>\r\n\r\nexport type TodoListsActionsType =\r\n    | SetTodoListsActionType\r\n    | RemoveTodoListActionType\r\n    | AddNewTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n\r\n\r\n","import {\r\n    ACTIONS_TODO_TYPE,\r\n    AddNewTodoListActionType,\r\n    RemoveTodoListActionType,\r\n    SetTodoListsActionType,\r\n} from './todoLists-reducer';\r\nimport {TasksStateType} from '../../app/App';\r\nimport {TaskType, todoListApi, UpdateTaskModelType} from '../../api/todolist-api';\r\nimport {AppRootStateType, AppThunk} from '../../app/store';\r\n\r\n\r\nenum ACTIONS_TASK_TYPE {\r\n    SET_TASKS = 'SET-TASKS',\r\n    REMOVE_TASK = 'REMOVE-TASK',\r\n    ADD_NEW_TASK = 'ADD-NEW-TASK',\r\n    CHANGE_TASK = 'CHANGE-TASK',\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TASK_TYPE.SET_TASKS:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks\r\n            }\r\n\r\n        case ACTIONS_TODO_TYPE.SET_TODOLISTS:\r\n            action.todoLists.forEach(tl => ({...state[tl.id] = []}))\r\n            return {...state}\r\n\r\n        case ACTIONS_TASK_TYPE.REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n\r\n        case ACTIONS_TASK_TYPE.ADD_NEW_TASK:\r\n            // {\r\n            //     const stateCopy = {...state}\r\n            //     const newTask = action.task\r\n            //\r\n            //     const tasks = stateCopy[newTask.todoListId];\r\n            //     const newTasks = [newTask, ...tasks];\r\n            //     stateCopy[newTask.todoListId] = newTasks;\r\n            //\r\n            //     return stateCopy;\r\n            // }\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        case ACTIONS_TASK_TYPE.CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    ...action.model\r\n                } : t)\r\n            }\r\n\r\n        case ACTIONS_TODO_TYPE.ADD_NEW_TODOLIST:\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n\r\n        case ACTIONS_TODO_TYPE.REMOVE_TODOLIST:\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTaskAC = (taskId: string, todoListId: string) =>\r\n    ({type: ACTIONS_TASK_TYPE.REMOVE_TASK, taskId, todoListId} as const)\r\n\r\nexport const addNewTaskAC = (task: TaskType) =>\r\n    ({type: ACTIONS_TASK_TYPE.ADD_NEW_TASK, task} as const)\r\n\r\nexport const changeTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) =>\r\n    ({type: ACTIONS_TASK_TYPE.CHANGE_TASK, taskId, model, todoListId} as const)\r\n\r\nexport const setTasksAC = (todoListId: string, tasks: TaskType[]) =>\r\n    ({type: ACTIONS_TASK_TYPE.SET_TASKS, todoListId, tasks} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListId: string): AppThunk => dispatch => {\r\n    todoListApi.getTasks(todoListId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(todoListId, res.data.items))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => dispatch => {\r\n    todoListApi.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        })\r\n}\r\n\r\nexport const addNewTaskTC = (todolistId: string, title: string): AppThunk => dispatch => {\r\n    todoListApi.createTask(todolistId, title)\r\n        .then(res => {\r\n            dispatch(addNewTaskAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, domainModel: UpdateDomainTaskModelType, taskId: string): AppThunk => (dispatch, getState: () => AppRootStateType) => {\r\n\r\n    const changedTask = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    if (changedTask) {\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: changedTask.title,\r\n            status: changedTask.status,\r\n            startDate: changedTask.startDate,\r\n            priority: changedTask.priority,\r\n            deadline: changedTask.deadline,\r\n            description: changedTask.description,\r\n            ...domainModel\r\n        }\r\n\r\n        todoListApi.updateTask(todolistId, taskId, apiModel)\r\n            .then(() => {\r\n                dispatch(changeTaskAC(taskId, domainModel, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\n//types\r\nexport type SetTaskActionType = ReturnType<typeof setTasksAC>\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddNewTaskActionType = ReturnType<typeof addNewTaskAC>\r\nexport type ChangeTaskActionType = ReturnType<typeof changeTaskAC>\r\n\r\nexport type TasksActionsType =\r\n    | SetTaskActionType\r\n    | RemoveTaskActionType\r\n    | AddNewTaskActionType\r\n    | ChangeTaskActionType\r\n    | AddNewTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (newItemTitle: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(({addItem}: AddItemFormPropsType) => {\r\n    const [newItemTitle, setNewItemTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItemTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }, [])\r\n\r\n    const onClickAddItem = useCallback(() => {\r\n        if (newItemTitle.trim() !== '') {\r\n            addItem(newItemTitle.trim())\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewItemTitle('')\r\n    }, [addItem, newItemTitle])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        (e.key === 'Enter') && onClickAddItem()\r\n    }, [onClickAddItem])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                error={error}\r\n                placeholder={'Enter a new task'}\r\n                value={newItemTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n                onBlur={() => setError(false)}\r\n            />\r\n            <IconButton onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (changedTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, onChangeTitle}: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [itemTitle, setItemTitle] = useState(title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        onChangeTitle(itemTitle)\r\n    }, [onChangeTitle, itemTitle])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }, [offEditMode])\r\n    return (\r\n        editMode\r\n            ? <Input\r\n                color={'primary'}\r\n                value={itemTitle}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from '../../../../components/editableSpan/EditableSpan';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch} from 'react-redux';\r\nimport {removeTaskTC, updateTaskTC} from '../../tasks-reducer';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolist-api';\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string\r\n    task: TaskType\r\n}\r\n\r\n\r\nexport const Task = React.memo(({todoListId, task}: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onRemoveHandler = useCallback(() => dispatch(removeTaskTC(todoListId, task.id)), [dispatch, task, todoListId])\r\n\r\n    const onChangeChecked = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTaskTC(todoListId, {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}, task.id))\r\n    }, [dispatch, task, todoListId])\r\n\r\n    const onChangeTitle = useCallback((changedTitle: string) => dispatch(updateTaskTC(todoListId, {title: changedTitle}, task.id)), [dispatch, task, todoListId])\r\n\r\n    const taskClasses = task.status === TaskStatuses.Completed ? 'isDone' : ''\r\n\r\n    return (\r\n        <li key={task.id}>\r\n                                <span className={taskClasses}>\r\n                                    <Checkbox\r\n                                        color={'primary'}\r\n                                        checked={task.status === TaskStatuses.Completed}\r\n                                        onChange={onChangeChecked}\r\n                                    />\r\n                                    <EditableSpan title={task.title}\r\n                                                  onChangeTitle={onChangeTitle}\r\n                                    />\r\n                                </span>\r\n            <IconButton onClick={onRemoveHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/addItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/editableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {addNewTaskTC, fetchTasksTC} from '../tasks-reducer';\r\nimport {Task} from './task/Task';\r\nimport {TaskStatuses, TaskType} from '../../../api/todolist-api';\r\nimport {FilterValuesType} from '../todoLists-reducer';\r\n\r\n\r\nexport type TodoListPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\n\r\nexport const TodoList = React.memo(({\r\n                                        todoListId,\r\n                                        changeTodoListTitle,\r\n                                        removeTodolist,\r\n                                        changeFilter,\r\n                                        title,\r\n                                        filter\r\n                                    }: TodoListPropsType) => {\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todoListId])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(todoListId))\r\n    }, [])\r\n\r\n    const getTaskForTodoList = () => {\r\n        switch (filter) {\r\n            case 'active':\r\n                return tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'completed':\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const newTasks = getTaskForTodoList()\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter('all', todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter('active', todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter('completed', todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onClickRemoveTodolist = useCallback(() => {\r\n        removeTodolist(todoListId)\r\n    }, [removeTodolist, todoListId])\r\n\r\n    const addNewTask = useCallback((newItemTitle: string) => dispatch(addNewTaskTC(todoListId, newItemTitle)), [dispatch, todoListId])\r\n\r\n    const onChangeTodoListTitle = useCallback((changedTitle: string) => changeTodoListTitle(changedTitle, todoListId), [changeTodoListTitle, todoListId])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={title} onChangeTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={onClickRemoveTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addNewTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                {\r\n                    newTasks.map(t => {\r\n                        return (\r\n                            <Task\r\n                                key={t.id}\r\n                                todoListId={todoListId}\r\n                                task={t}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onAllClickHandler}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onActiveClickHandler}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onCompletedClickHandler}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    InitialTodoListsStateType,\r\n    removeTodoListTC\r\n} from './todoLists-reducer';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {AddItemForm} from '../../components/addItemForm/AddItemForm';\r\nimport {TodoList} from './todolist/Todolist';\r\n\r\n\r\nexport const TodoListsList: React.FC = () => {\r\n    //BLL\r\n    const todoLists = useSelector<AppRootStateType, InitialTodoListsStateType>(state => state.todoLists)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    function removeTodolist(todoListId: string) {\r\n        dispatch(removeTodoListTC(todoListId))\r\n    }\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    function changeTodoListTitle(title: string, todoListId: string) {\r\n        dispatch(changeTodoListTitleTC(todoListId, title))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        dispatch(changeTodoListFilterAC(value, todoListId))\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper elevation={4} style={{padding: '15px'}}>\r\n                                <TodoList\r\n                                    todoListId={tl.id}\r\n                                    title={tl.title}\r\n                                    changeFilter={changeFilter}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TaskType} from '../api/todolist-api';\r\nimport {TodoListsList} from '../features/todolistsList/TodoListsList';\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    //UI:\r\n    return (\r\n        //JSX\r\n        <div>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        color={'inherit'}\r\n                        variant={'outlined'}\r\n                    >\r\n                        LogIn\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <TodoListsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TasksActionsType, tasksReducer} from '../features/todolistsList/tasks-reducer';\r\nimport {TodoListsActionsType, todoListsReducer} from '../features/todolistsList/todoLists-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\nexport type AppActionsType = TodoListsActionsType | TasksActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}