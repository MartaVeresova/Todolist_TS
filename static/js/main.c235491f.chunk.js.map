{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","state/todoLists-reducer.ts","state/tasks-reducer.ts","Todolist.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","newItemTitle","setNewItemTitle","error","setError","onClickAddItem","trim","addItem","TextField","variant","placeholder","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","size","onBlur","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","title","itemTitle","setItemTitle","offEditMode","onChangeTitle","Input","color","autoFocus","onDoubleClick","todoListID1","v1","todoListID2","initialState","id","filter","isDone","Todolist","tasks","useSelector","state","todoListId","dispatch","useDispatch","allTodoListTasks","tasksForTodoList","t","changedTitle","changeTodoListTitle","removeTodolist","Delete","type","style","listStyle","paddingLeft","map","taskClasses","className","Checkbox","checked","taskId","newIsDoneChecked","newTitle","Button","changeFilter","marginLeft","AppWithRedux","todoLists","removeTodoListAC","changeTodoListTitleAC","changeTodoListFilterAC","todoListComponent","tl","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","addNewTodoListAC","spacing","rootReducers","combineReducers","action","newTodoList","newTask","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c235491f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newItemTitle: string) => void\r\n}\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [newItemTitle, setNewItemTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItemTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        (e.key === 'Enter') && onClickAddItem()\r\n        }\r\n\r\n    const onClickAddItem = () => {\r\n        if (newItemTitle.trim() !== '') {\r\n            props.addItem(newItemTitle.trim())\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewItemTitle('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                error={error}\r\n                placeholder={'Enter a new task'}\r\n                value={newItemTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error && 'Title is required!'}\r\n                size={'small'}\r\n                onBlur={() => setError(false)}\r\n            />\r\n            <IconButton onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (changedTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [itemTitle, setItemTitle] = useState(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChangeTitle(itemTitle)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n    return (\r\n        editMode\r\n            ? <Input\r\n                color={'primary'}\r\n                value={itemTitle}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import {FilterValuesType, TodoListsType} from '../AppWithRedux';\r\nimport {v1} from 'uuid';\r\n\r\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST'\r\nexport const ADD_NEW_TODOLIST = 'ADD-NEW-TODOLIST'\r\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE'\r\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER'\r\n\r\nexport type RemoveTodoListType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListId: string\r\n}\r\nexport type AddNewTodoListType = {\r\n    type: 'ADD-NEW-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListTitleType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListFilterType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    value: FilterValuesType\r\n    todoListId: string\r\n}\r\nexport type ActionsType =\r\n    RemoveTodoListType\r\n    | AddNewTodoListType\r\n    | ChangeTodoListTitleType\r\n    | ChangeTodoListFilterType\r\n\r\nexport const todoListID1 = v1()\r\nexport const todoListID2 = v1()\r\n\r\nconst initialState: Array<TodoListsType> = [\r\n    {id: todoListID1, title: 'What to learn', filter: 'all'},\r\n    {id: todoListID2, title: 'What to buy', filter: 'all'},\r\n]\r\n\r\nexport type InitialTodoListsStateType = typeof initialState\r\n\r\nexport const todoListsReducer = (state = initialState, action: ActionsType): InitialTodoListsStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case REMOVE_TODOLIST:\r\n            return state.filter(tl => tl.id !== action.todoListId)\r\n\r\n        case ADD_NEW_TODOLIST:\r\n            const newTodoList: TodoListsType = {\r\n                id: action.todoListId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }\r\n            return [newTodoList, ...state]\r\n\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.title} : tl)\r\n\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.value} : tl)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListType => {\r\n    return {type: REMOVE_TODOLIST, todoListId}\r\n}\r\nexport const addNewTodoListAC = (title: string): AddNewTodoListType => {\r\n    return {type: ADD_NEW_TODOLIST, title, todoListId: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (title: string, todoListId: string): ChangeTodoListTitleType => {\r\n    return {type: CHANGE_TODOLIST_TITLE, title, todoListId}\r\n}\r\nexport const changeTodoListFilterAC = (value: FilterValuesType, todoListId: string): ChangeTodoListFilterType => {\r\n    return {type: CHANGE_TODOLIST_FILTER, value, todoListId}\r\n}","import {v1} from 'uuid';\r\nimport {\r\n    ADD_NEW_TODOLIST,\r\n    AddNewTodoListType,\r\n    REMOVE_TODOLIST,\r\n    RemoveTodoListType,\r\n    todoListID1,\r\n    todoListID2\r\n} from './todoLists-reducer';\r\nimport {TasksStateType} from '../AppWithRedux';\r\nimport {TasksPropsType} from '../Todolist';\r\n\r\nexport const REMOVE_TASK = 'REMOVE-TASK'\r\nexport const ADD_NEW_TASK = 'ADD-NEW-TASK'\r\nexport const CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\r\nexport const CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\r\n\r\n\r\nexport type RemoveTaskType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todoListId: string\r\n}\r\nexport type AddNewTaskType = {\r\n    type: 'ADD-NEW-TASK'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskStatusType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    newIsDoneChecked: boolean\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskTitleType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    newTitle: string\r\n    todoListId: string\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveTaskType\r\n    | AddNewTaskType\r\n    | ChangeTaskStatusType\r\n    | ChangeTaskTitleType\r\n    | AddNewTodoListType\r\n    | RemoveTodoListType\r\n\r\n\r\nconst initialState: TasksStateType = {\r\n    [todoListID1]: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true}, //t\r\n        {id: v1(), title: 'JS', isDone: true}, //t\r\n        {id: v1(), title: 'React', isDone: false}, //t\r\n        {id: v1(), title: 'Redux', isDone: false}, //t\r\n    ],\r\n    [todoListID2]: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true}, //t\r\n        {id: v1(), title: 'JS', isDone: true}, //t\r\n        {id: v1(), title: 'React', isDone: false}, //t\r\n        {id: v1(), title: 'Redux', isDone: false}, //t\r\n    ],\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.id)\r\n            }\r\n\r\n        case ADD_NEW_TASK:\r\n            const newTask: TasksPropsType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [newTask, ...state[action.todoListId]]\r\n            }\r\n\r\n        case CHANGE_TASK_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    isDone: action.newIsDoneChecked\r\n                } : t)\r\n            }\r\n\r\n        case CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.newTitle\r\n                } : t)\r\n            }\r\n\r\n        case ADD_NEW_TODOLIST:\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: []\r\n            }\r\n\r\n        case REMOVE_TODOLIST:\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (id: string, todoListId: string): RemoveTaskType => {\r\n    return {type: REMOVE_TASK, id, todoListId}\r\n}\r\nexport const addNewTaskAC = (title: string, todoListId: string): AddNewTaskType => {\r\n    return {type: ADD_NEW_TASK, title, todoListId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, newIsDoneChecked: boolean, todoListId: string): ChangeTaskStatusType => {\r\n    return {type: CHANGE_TASK_STATUS, taskId, newIsDoneChecked, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, newTitle: string, todoListId: string): ChangeTaskTitleType => {\r\n    return {type: CHANGE_TASK_TITLE, taskId, newTitle, todoListId}\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './AppWithRedux';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootState} from './state/store';\r\nimport {addNewTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\n\r\nexport type TasksPropsType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const tasks = useSelector<AppRootState, Array<TasksPropsType>>(state => state.tasks[props.todoListId])\r\n    const dispatch = useDispatch()\r\n\r\n    let allTodoListTasks = tasks\r\n    let tasksForTodoList = allTodoListTasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = allTodoListTasks.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = allTodoListTasks.filter(t => t.isDone)\r\n    }\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter('all', props.todoListId)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter('active', props.todoListId)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter('completed', props.todoListId)\r\n    }\r\n    const onClickRemoveTodolist = () => {\r\n        props.removeTodolist(props.todoListId)\r\n    }\r\n    const addNewTask = (newItemTitle: string) => dispatch(addNewTaskAC(newItemTitle, props.todoListId))\r\n    const onChangeTodoListTitle = (changedTitle: string) => props.changeTodoListTitle(changedTitle, props.todoListId)\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChangeTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={onClickRemoveTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addNewTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                {\r\n                    tasksForTodoList.map(t => {\r\n                        const onRemoveHandler = () => dispatch(removeTaskAC(t.id, props.todoListId))\r\n                        const onChangeChecked = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            dispatch(changeTaskStatusAC(t.id, e.currentTarget.checked, props.todoListId))\r\n                        }\r\n                        const onChangeTitle = (changedTitle: string) => dispatch(changeTaskTitleAC(t.id, changedTitle, props.todoListId))\r\n                        const taskClasses = t.isDone ? 'isDone' : ''\r\n\r\n                        return (\r\n                            <li key={t.id}>\r\n                                <span className={taskClasses}>\r\n                                    <Checkbox\r\n                                        color={'primary'}\r\n                                        checked={t.isDone}\r\n                                        onChange={onChangeChecked}\r\n                                    />\r\n                                    <EditableSpan title={t.title}\r\n                                                  onChangeTitle={onChangeTitle}\r\n                                    />\r\n                                </span>\r\n                                <IconButton onClick={onRemoveHandler}>\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onAllClickHandler}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onActiveClickHandler}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onCompletedClickHandler}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {TasksPropsType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addNewTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    InitialTodoListsStateType,\r\n    removeTodoListAC\r\n} from './state/todoLists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootState} from './state/store';\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksPropsType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    //BLL:\r\n    const todoLists = useSelector<AppRootState, InitialTodoListsStateType>(state => state.todoLists)\r\n    const dispatch = useDispatch()\r\n\r\n    function removeTodolist(todoListId: string) {\r\n        dispatch(removeTodoListAC(todoListId))\r\n    }\r\n    function addTodoList(title: string) {\r\n        dispatch(addNewTodoListAC(title))\r\n    }\r\n    function changeTodoListTitle(title: string, todoListId: string) {\r\n        dispatch(changeTodoListTitleAC(title, todoListId))\r\n    }\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        dispatch(changeTodoListFilterAC(value, todoListId))\r\n    }\r\n\r\n    //UI:\r\n\r\n    const todoListComponent = todoLists.map(tl =>\r\n        <Grid item key={tl.id}>\r\n            <Paper elevation={4} style={{padding: '15px'}}>\r\n                <Todolist\r\n                    todoListId={tl.id}\r\n                    title={tl.title}\r\n                    changeFilter={changeFilter}\r\n                    filter={tl.filter}\r\n                    removeTodolist={removeTodolist}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n    return (\r\n        //JSX\r\n        <div>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        color={'inherit'}\r\n                        variant={'outlined'}\r\n                    >\r\n                        LogIn\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListComponent}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todoLists-reducer';\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducers>\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}